<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编程、人生</title>
  
  <subtitle>前端 | 后台 | linux</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vonfly.github.io/"/>
  <updated>2018-08-22T11:54:19.380Z</updated>
  <id>https://vonfly.github.io/</id>
  
  <author>
    <name>阿东</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos+git+gitolite 安装和部署</title>
    <link href="https://vonfly.github.io/2018/05/30/centos-git-gitolite/"/>
    <id>https://vonfly.github.io/2018/05/30/centos-git-gitolite/</id>
    <published>2018-05-30T13:39:58.000Z</published>
    <updated>2018-08-22T11:54:19.380Z</updated>
    
    <content type="html"><![CDATA[<p>部署环境：CentOS 6.8x64，git默认使用SSH协议，在服务器上基本上不用怎么配置就能直接使用。但是如果面向团队服务，需要控制权限的话，还是用gitolite方便些。一般来说，配置git服务器的话，需要一台服务器，还需要一个客户端来验证服务器是否搭建成功，而一般开发者基本都只有一台服务器，那就需要这台服务器既作为Git的服务器，又要作为客户端来使用了，下面的教程就是以服务器和客户端都是同一台服务器为例的。如果需要服务器和客户端分开的话，只需要将下面列出的服务器端和客户端的操作到相应的机器上操作就可以了。<br><a id="more"></a></p><h2 id="创建git服务器专用账户（服务器端）："><a href="#创建git服务器专用账户（服务器端）：" class="headerlink" title="创建git服务器专用账户（服务器端）："></a>创建git服务器专用账户（服务器端）：</h2><p>1、创建用户git，并设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# useradd -m -s /bin/bash git</span><br><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# passwd git</span><br></pre></td></tr></table></figure><p>2、切换到git用户，在家目录/home/git下创建安装目录bin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# su - git</span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# mkdir bin</span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# ll</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 3 git  git  4096 Aug 20 10:38 ./</span><br><span class="line">drwxr-xr-x 8 root root 4096 Aug 20 10:36 ../</span><br><span class="line">-rw-r--r-- 1 git  git   220 Apr  3  2012 .bash_logout</span><br><span class="line">-rw-r--r-- 1 git  git  3486 Apr  3  2012 .bashrc</span><br><span class="line">drwxrwxr-x 2 git  git  4096 Aug 20 10:38 bin/</span><br><span class="line">-rw-r--r-- 1 git  git   675 Apr  3  2012 .profile</span><br></pre></td></tr></table></figure><p>3、获取 Gitolite 并安装，gitolite要安装在服务器端，安装之前要保证系统上已经安装了git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# git clone https://github.com/sitaramc/gitolite</span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# ll</span><br><span class="line">total 28</span><br><span class="line">drwxr-xr-x 4 git  git  4096 Aug 20 10:40 ./</span><br><span class="line">drwxr-xr-x 8 root root 4096 Aug 20 10:36 ../</span><br><span class="line">-rw-r--r-- 1 git  git   220 Apr  3  2012 .bash_logout</span><br><span class="line">-rw-r--r-- 1 git  git  3486 Apr  3  2012 .bashrc</span><br><span class="line">drwxrwxr-x 2 git  git  4096 Aug 20 10:38 bin/</span><br><span class="line">drwxr-xr-x 6 git  git  4096 Aug 20 10:40 gitolite/</span><br><span class="line">-rw-r--r-- 1 git  git   675 Apr  3  2012 .profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# gitolite/install -ln</span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# ll</span><br><span class="line">total 28</span><br><span class="line">drwxr-xr-x 4 git  git  4096 Aug 20 10:40 ./</span><br><span class="line">drwxr-xr-x 8 root root 4096 Aug 20 10:36 ../</span><br><span class="line">-rw-r--r-- 1 git  git   220 Apr  3  2012 .bash_logout</span><br><span class="line">-rw-r--r-- 1 git  git  3486 Apr  3  2012 .bashrc</span><br><span class="line">drwxrwxr-x 2 git  git  4096 Aug 20 10:44 bin/</span><br><span class="line">drwxr-xr-x 6 git  git  4096 Aug 20 10:40 gitolite/</span><br><span class="line">-rw-r--r-- 1 git  git   675 Apr  3  2012 .profile</span><br></pre></td></tr></table></figure><h2 id="创建-Gitolite-服务器管理员用户，并创建管理员用户密钥（客户端）："><a href="#创建-Gitolite-服务器管理员用户，并创建管理员用户密钥（客户端）：" class="headerlink" title="创建 Gitolite 服务器管理员用户，并创建管理员用户密钥（客户端）："></a>创建 Gitolite 服务器管理员用户，并创建管理员用户密钥（客户端）：</h2><p>因为我们是在同一台服务器上，直接exit退回到root用户，之后变身为客户端模式，如果客户端和服务器分开的话，不需要exit指令了，直接在客户端执行添加用户的指令就可以了。这里的Gitolite服务器管理员用户名我们叫gitAdmin</p><p>1、创建用户git，并设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# useradd -m -s /bin/bash gitAdmin</span><br><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# passwd gitAdmin</span><br></pre></td></tr></table></figure><p>2、切换到gitAdmin用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# su - gitAdmin</span><br><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ ~]# ll</span><br><span class="line">total 24</span><br><span class="line">drwxr-xr-x 3 gitAdmin gitAdmin 4096 Aug 20 10:48 ./</span><br><span class="line">drwxr-xr-x 9 root     root     4096 Aug 20 10:46 ../</span><br><span class="line">-rw-r--r-- 1 gitAdmin gitAdmin  220 Apr  3  2012 .bash_logout</span><br><span class="line">-rw-r--r-- 1 gitAdmin gitAdmin 3486 Apr  3  2012 .bashrc</span><br><span class="line">-rw-r--r-- 1 gitAdmin gitAdmin  675 Apr  3  2012 .profile</span><br><span class="line">drwxrwxr-x 2 gitAdmin gitAdmin 4096 Aug 20 10:48 .ssh/</span><br></pre></td></tr></table></figure><p>3、创建用户密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ ~]# ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>4、将管理员公钥（gitAdmin.pub)复制 到服务器上的 git 用户的家目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ ~]# exit</span><br><span class="line">logout</span><br><span class="line"></span><br><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# cp /home/gitAdmin/.ssh/gitAdmin.pub /home/git/</span><br><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# ll /home/git</span><br><span class="line"></span><br><span class="line">total 36</span><br><span class="line">drwxr-xr-x 4 git  git  4096 Aug 20 10:53 ./</span><br><span class="line">drwxr-xr-x 9 root root 4096 Aug 20 10:46 ../</span><br><span class="line">-rw------- 1 git  git   788 Aug 20 10:45 .bash_history</span><br><span class="line">-rw-r--r-- 1 git  git   220 Apr  3  2012 .bash_logout</span><br><span class="line">-rw-r--r-- 1 git  git  3486 Apr  3  2012 .bashrc</span><br><span class="line">drwxrwxr-x 2 git  git  4096 Aug 20 10:44 bin/</span><br><span class="line">-rw-r--r-- 1 root root  412 Aug 20 10:53 gitAdmin.pub</span><br><span class="line">drwxr-xr-x 6 git  git  4096 Aug 20 10:40 gitolite/</span><br><span class="line">-rw-r--r-- 1 git  git   675 Apr  3  2012 .profile</span><br></pre></td></tr></table></figure><h2 id="配置-Gitolite-服务器（服务器端）："><a href="#配置-Gitolite-服务器（服务器端）：" class="headerlink" title="配置 Gitolite 服务器（服务器端）："></a>配置 Gitolite 服务器（服务器端）：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# su - git</span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# gitolite setup -pk gitAdmin.pub</span><br><span class="line"></span><br><span class="line">Initialized empty Git repository in /home/git/repositories/gitolite-admin.git/</span><br><span class="line">Initialized empty Git repository in /home/git/repositories/testing.git/</span><br><span class="line">WARNING: /home/git/.ssh missing; creating a new one</span><br><span class="line">    (this is normal on a brand new install)</span><br><span class="line">WARNING: /home/git/.ssh/authorized_keys missing; creating a new one</span><br><span class="line">    (this is normal on a brand new install)</span><br><span class="line"></span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# ll</span><br><span class="line"></span><br><span class="line">total 60</span><br><span class="line">drwxr-xr-x 7 git  git  4096 Aug 20 10:57 ./</span><br><span class="line">drwxr-xr-x 9 root root 4096 Aug 20 10:46 ../</span><br><span class="line">-rw------- 1 git  git   788 Aug 20 10:45 .bash_history</span><br><span class="line">-rw-r--r-- 1 git  git   220 Apr  3  2012 .bash_logout</span><br><span class="line">-rw-r--r-- 1 git  git  3486 Apr  3  2012 .bashrc</span><br><span class="line">drwxrwxr-x 2 git  git  4096 Aug 20 10:44 bin/</span><br><span class="line">-rw-r--r-- 1 root root  412 Aug 20 10:53 gitAdmin.pub</span><br><span class="line">drwxr-xr-x 6 git  git  4096 Aug 20 10:40 gitolite/</span><br><span class="line">drwx------ 6 git  git  4096 Aug 20 10:57 .gitolite/</span><br><span class="line">-rw------- 1 git  git  6662 Aug 20 10:57 .gitolite.rc</span><br><span class="line">-rw-r--r-- 1 git  git   675 Apr  3  2012 .profile</span><br><span class="line">-rw------- 1 git  git    12 Aug 20 10:57 projects.list</span><br><span class="line">drwx------ 4 git  git  4096 Aug 20 10:57 repositories/</span><br><span class="line">drwx------ 2 git  git  4096 Aug 20 10:57 .ssh/</span><br></pre></td></tr></table></figure><h2 id="验证Gitolite管理员账户访问服务器的别名以及验证别名是否成功（客户端）："><a href="#验证Gitolite管理员账户访问服务器的别名以及验证别名是否成功（客户端）：" class="headerlink" title="验证Gitolite管理员账户访问服务器的别名以及验证别名是否成功（客户端）："></a>验证Gitolite管理员账户访问服务器的别名以及验证别名是否成功（客户端）：</h2><p>1、切换到gitAdmin账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]# exit</span><br><span class="line">logout</span><br><span class="line">[root@iZbp1c8ppw4ox72sq8z6hkZ ~]# su - gitAdmin</span><br><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ ~]# ll .ssh/</span><br><span class="line"></span><br><span class="line">total 16</span><br><span class="line">drwxrwxr-x 2 gitAdmin gitAdmin 4096 Aug 20 10:49 ./</span><br><span class="line">drwxr-xr-x 3 gitAdmin gitAdmin 4096 Aug 20 10:53 ../</span><br><span class="line">-rw------- 1 gitAdmin gitAdmin 1679 Aug 20 10:49 gitAdmin</span><br><span class="line">-rw-r--r-- 1 gitAdmin gitAdmin  412 Aug 20 10:49 gitAdmin.pub</span><br><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ ~]# vi .ssh/config</span><br></pre></td></tr></table></figure><p>2、在.ssh文件夹下新建config文件，输入下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">host git</span><br><span class="line">        user git</span><br><span class="line">        hostname xxx.xxx.xxx.xxx</span><br><span class="line">        port 22</span><br><span class="line">        identityfile ~/.ssh/gitAdmin</span><br></pre></td></tr></table></figure><p>host： 随便定义，用于客户端标识所连接服务端的名字；<br>user ：随便定义<br>hostname ：服务器主机名，或者直接填写服务器 IP 地址；<br>port：服务器的ssh访问端口，默认22；<br>identityfile ：管理员登录服务器所使用的验证密钥；</p><p>3、使用服务器别名从 Gitolite 服务器 clone Gitolite 服务器管理仓库 gitolite-admin ，验证别名配置是否成功，以下表示已经clone成功了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ ~]# git clone git@git:gitolite-admin</span><br><span class="line"></span><br><span class="line">Cloning into &apos;gitolite-admin&apos;...</span><br><span class="line">The authenticity of host &apos;xxx.xxx.xxx.xxx (xxx.xxx.xxx.xxx)&apos; can&apos;t be established.</span><br><span class="line">ECDSA key fingerprint is c1:c2:6a:7a:68:c8:e5:a6:87:f4:9b:95:d5:fd:ff:09.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;xxx.xxx.xxx.xxx&apos; (ECDSA) to the list of known hosts.</span><br><span class="line">remote: Counting objects: 6, done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">Receiving objects: 100% (6/6), 763 bytes, done.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0)</span><br></pre></td></tr></table></figure><h2 id="添加新项目以及分配权限（客户端）："><a href="#添加新项目以及分配权限（客户端）：" class="headerlink" title="添加新项目以及分配权限（客户端）："></a>添加新项目以及分配权限（客户端）：</h2><p>1、先登录进入客户端，查看家目录对应文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ ~]# ll -a</span><br><span class="line"></span><br><span class="line">total 40</span><br><span class="line">drwx------  4 gitadmin gitadmin 4096 May 24 09:18 .</span><br><span class="line">drwxr-xr-x. 8 root     root     4096 May 22 14:48 ..</span><br><span class="line">-rw-------  1 gitadmin gitadmin 2818 May 31 00:32 .bash_history</span><br><span class="line">-rw-r--r--  1 gitadmin gitadmin   18 Mar 23  2017 .bash_logout</span><br><span class="line">-rw-r--r--  1 gitadmin gitadmin  176 Mar 23  2017 .bash_profile</span><br><span class="line">-rw-r--r--  1 gitadmin gitadmin  124 Mar 23  2017 .bashrc</span><br><span class="line">-rw-rw-r--  1 gitadmin gitadmin   53 May 20 20:49 .gitconfig</span><br><span class="line">drwxr-xr-x  5 gitadmin gitadmin 4096 May 20 20:26 gitolite-admin</span><br><span class="line">drwx------  2 gitadmin gitadmin 4096 May 20 20:26 .ssh</span><br><span class="line">-rw-------  1 gitadmin gitadmin  789 May 24 09:18 .viminfo</span><br></pre></td></tr></table></figure><p>2、进入gitolite-admin目录，该目录就是管理项目和权限目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ ~]# cd gitolite-admin</span><br><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ gitolite-admin]$ ll</span><br><span class="line"></span><br><span class="line">total 8</span><br><span class="line">drwxrwxr-x 2 gitadmin gitadmin 4096 May 24 09:18 conf</span><br><span class="line">drwxrwxr-x 2 gitadmin gitadmin 4096 May 22 16:32 keydir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ gitolite-admin]$ ll keydir/</span><br><span class="line">total 20</span><br><span class="line">-rw-rw-r-- 1 gitadmin gitadmin 390 May 20 22:48 bijiben.pub</span><br><span class="line">-rw-r--r-- 1 root     root     401 May 22 16:32 company.pub</span><br><span class="line">-rw-rw-r-- 1 gitadmin gitadmin 414 May 20 20:26 gitadmin.pub</span><br><span class="line">-rw-r--r-- 1 root     root     410 May 22 15:23 test.pub</span><br><span class="line">-rw-rw-r-- 1 gitadmin gitadmin 397 May 20 23:23 xiaoming.pub</span><br><span class="line"></span><br><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ gitolite-admin]$ ll conf/</span><br><span class="line">total 4</span><br><span class="line">-rw-rw-r-- 1 gitadmin gitadmin 146 May 24 09:18 gitolite.conf</span><br></pre></td></tr></table></figure><p>keydir目录就是放密钥的，公司员工在自己电脑生成密钥，然后给到管理员上传到该目录，分配对应项目权限即可，员工自己配置别名克隆项目就好了</p><p>conf目录是配置项目以及分配权限的目录</p><p>3、打开gitolite.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[gitAdmin@iZbp1c8ppw4ox72sq8z6hkZ gitolite-admin]$ vim conf/gitolite.conf</span><br></pre></td></tr></table></figure><p>如图所示：<br><img src="http://olixffhc0.bkt.clouddn.com/gitolite.jpg" alt="打开后"></p><p>上面的配置含义是：</p><p>定义一个用户组： user</p><p>定义三个版本库： gitolite-admin 、testing 和 shop</p><p>项目gitolite-admin只有gitadmin用户才有权限操作</p><p>项目testing表示所有用户都可以进行操作</p><p>用户组成员对项目shop有（读 写 删除）RW+ 权限</p><p>一个组中有多个用户，则以空格为分割</p><p>4、每次修改这两个目录需要提交修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[gitadmin@iZbp1c8ppw4ox72sq8z6hkZ gitolite-admin]$ git add .</span><br><span class="line">[gitadmin@iZbp1c8ppw4ox72sq8z6hkZ gitolite-admin]$ git status</span><br><span class="line">[gitadmin@iZbp1c8ppw4ox72sq8z6hkZ gitolite-admin]$ git commit -m &quot;test&quot;</span><br><span class="line">[gitadmin@iZbp1c8ppw4ox72sq8z6hkZ gitolite-admin]$ git push origin master</span><br></pre></td></tr></table></figure><p>至此已经完成了</p><h2 id="（扩展）windows下克隆项目"><a href="#（扩展）windows下克隆项目" class="headerlink" title="（扩展）windows下克隆项目"></a>（扩展）windows下克隆项目</h2><p>1、生成对应密钥，并上传到客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>2、创建config文件，并配置别名<br>如图所示：<br><img src="http://olixffhc0.bkt.clouddn.com/gitolite3.jpg" alt="如图所示"><br><img src="http://olixffhc0.bkt.clouddn.com/gitolite4.jpg" alt="如图所示"></p><p>然后直接输入下边命令克隆即可（如果你的账户有权限包括git其他命令也可以使用、git push origin master等等）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@bijiben:testing</span><br></pre></td></tr></table></figure><p>如果我还有其他的git服务器也要提交项目代码怎么办？很简单，生成多一个密钥，指定对应别名，如上图我还要对github.com网站上的项目进行提交代码，所以我就多生成一个密钥，在本地项目重新指定即可<br>假设我本地原本已经有了<a href="https://github.com/vonfly/vonfly.github.io.git这个项目了，只不过之前的密钥给删除了，或者覆盖了，我如何重新进行关联呢？" target="_blank" rel="noopener">https://github.com/vonfly/vonfly.github.io.git这个项目了，只不过之前的密钥给删除了，或者覆盖了，我如何重新进行关联呢？</a></p><p>首先先在登录你github账户上，在本地找到 github.pub文件，用编辑器打开，复制其中的全部内容。<br>登陆你的GitHub账户，依次点击账号Settings &gt; SSH and GPG keys &gt; new SSH key，把github.<br>pub中的内容拷贝进去key项，title项随意填 。</p><p>至此就已经配置完SSH-Key了</p><p>然后本地执行下边代码进行重新关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@github:vonfly/vonfly.github.io.git</span><br></pre></td></tr></table></figure><p>之后就可以执行git的提交和更新等操作了</p><h2 id="（扩展）使用git钩子完善完美的git服务器（暂时不知道怎么描述，因为有很多也不是很懂）："><a href="#（扩展）使用git钩子完善完美的git服务器（暂时不知道怎么描述，因为有很多也不是很懂）：" class="headerlink" title="（扩展）使用git钩子完善完美的git服务器（暂时不知道怎么描述，因为有很多也不是很懂）："></a>（扩展）使用git钩子完善完美的git服务器（暂时不知道怎么描述，因为有很多也不是很懂）：</h2><p>1、首先，我们切换到gitadmin 用户（客户端），来到gitolite-admin/conf/目录下，在gitolite.conf中添加一个新的仓库，名字为：dong-admin</p><p>vim编辑后如下图<br><img src="http://olixffhc0.bkt.clouddn.com/gitolite1.jpg" alt="编辑后"></p><p>操作步骤如下图<br><img src="http://olixffhc0.bkt.clouddn.com/gitolite2.jpg" alt="编辑后"></p><p>2、切换到git用户（服务端）,进入repositories目录，已经有了dong-admin.git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ ~]$ cd repositories/</span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ repositories]$ ll</span><br><span class="line">total 16</span><br><span class="line">drwx------ 7 git git 4096 May 31 20:56 dong-admin.git</span><br><span class="line">drwx------ 8 git git 4096 May 31 20:56 gitolite-admin.git</span><br><span class="line">drwx------ 7 git git 4096 May 31 20:56 shop.git</span><br><span class="line">drwx------ 7 git git 4096 May 31 20:56 testing.git</span><br></pre></td></tr></table></figure><p>我们查看一下dong-admin.git目录里都有什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ repositories]$ cd dong-admin.git/</span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ dong-admin.git]$ ll</span><br><span class="line">total 36</span><br><span class="line">drwx------ 2 git git 4096 May 31 20:56 branches</span><br><span class="line">-rw------- 1 git git   66 May 31 20:56 config</span><br><span class="line">-rw------- 1 git git   73 May 31 20:56 description</span><br><span class="line">-rw------- 1 git git    0 May 31 20:56 git-daemon-export-ok</span><br><span class="line">-rw------- 1 git git  123 May 31 20:56 gl-conf</span><br><span class="line">-rw------- 1 git git   23 May 31 20:56 HEAD</span><br><span class="line">drwx------ 2 git git 4096 May 31 20:56 hooks</span><br><span class="line">drwx------ 2 git git 4096 May 31 20:56 info</span><br><span class="line">drwx------ 4 git git 4096 May 31 20:56 objects</span><br><span class="line">drwx------ 4 git git 4096 May 31 20:56 refs</span><br></pre></td></tr></table></figure><p>别的目录都不要管，可以看到有个hooks目录，继续查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ dong-admin.git]$ cd hooks/</span><br><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ hooks]$ ll</span><br><span class="line">total 44</span><br><span class="line">-rwx------ 1 git git  452 May 31 20:56 applypatch-msg.sample</span><br><span class="line">-rwx------ 1 git git  896 May 31 20:56 commit-msg.sample</span><br><span class="line">-rwx------ 1 git git  160 May 31 20:56 post-commit.sample</span><br><span class="line">-rwx------ 1 git git  548 May 31 20:56 post-receive.sample</span><br><span class="line">-rwx------ 1 git git  189 May 31 20:56 post-update.sample</span><br><span class="line">-rwx------ 1 git git  398 May 31 20:56 pre-applypatch.sample</span><br><span class="line">-rwx------ 1 git git 1578 May 31 20:56 pre-commit.sample</span><br><span class="line">-rwx------ 1 git git 1239 May 31 20:56 prepare-commit-msg.sample</span><br><span class="line">-rwx------ 1 git git 4951 May 31 20:56 pre-rebase.sample</span><br><span class="line">lrwxrwxrwx 1 git git   39 May 31 20:56 update -&gt; /home/git/.gitolite/hooks/common/update</span><br><span class="line">-rwx------ 1 git git 3611 May 31 20:56 update.sample</span><br></pre></td></tr></table></figure><p>好了，这里就是我们要找的目录了，我们需要在这个目录下创建钩子文件：<br>使用vim 创建一个新文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[git@iZbp1c8ppw4ox72sq8z6hkZ hooks]$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部署环境：CentOS 6.8x64，git默认使用SSH协议，在服务器上基本上不用怎么配置就能直接使用。但是如果面向团队服务，需要控制权限的话，还是用gitolite方便些。一般来说，配置git服务器的话，需要一台服务器，还需要一个客户端来验证服务器是否搭建成功，而一般开发者基本都只有一台服务器，那就需要这台服务器既作为Git的服务器，又要作为客户端来使用了，下面的教程就是以服务器和客户端都是同一台服务器为例的。如果需要服务器和客户端分开的话，只需要将下面列出的服务器端和客户端的操作到相应的机器上操作就可以了。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonfly.github.io/categories/Linux/"/>
    
    
      <category term="git" scheme="https://vonfly.github.io/tags/git/"/>
    
      <category term="Centos" scheme="https://vonfly.github.io/tags/Centos/"/>
    
      <category term="gitolite" scheme="https://vonfly.github.io/tags/gitolite/"/>
    
  </entry>
  
  <entry>
    <title>windows下安装yii</title>
    <link href="https://vonfly.github.io/2017/06/01/yii-install/"/>
    <id>https://vonfly.github.io/2017/06/01/yii-install/</id>
    <published>2017-06-01T12:49:28.000Z</published>
    <updated>2018-08-22T11:54:19.392Z</updated>
    
    <content type="html"><![CDATA[<p>通过 Composer 安装<br><a id="more"></a></p><h3 id="Packagist-Composer中国全量镜像"><a href="#Packagist-Composer中国全量镜像" class="headerlink" title="Packagist / Composer中国全量镜像"></a>Packagist / Composer中国全量镜像</h3><h4 id="先安装-Composer"><a href="#先安装-Composer" class="headerlink" title="先安装 Composer"></a>先安装 Composer</h4><p>安装前请务必确保已经正确安装了 PHP。打开命令行窗口并执行 php -v 查看是否正确输出版本号。<br>打开命令行并依次执行下列命令安装最新版本的 Composer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;copy(&apos;https://install.phpcomposer.com/installer&apos;, &apos;composer-setup.php&apos;);&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php composer-setup.php</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &quot;unlink(&apos;composer-setup.php&apos;);&quot;</span><br></pre></td></tr></table></figure><p>说明：<br>执行第一条命令下载下来的 composer-setup.php 脚本将简单地检测 php.ini 中的参数设置，如果某些参数未正确设置则会给出警告；然后下载最新版本的 composer.phar 文件到当前目录。</p><p>上述 3 条命令的作用依次是：</p><p>下载安装脚本 － composer-setup.php － 到当前目录。<br>执行安装过程。<br>删除安装脚本。</p><h5 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h5><p>全局安装是将 Composer 安装到系统环境变量 PATH 所包含的路径下面，然后就能够在命令行窗口中直接执行 composer 命令了。</p><h6 id="Mac-或-Linux-系统："><a href="#Mac-或-Linux-系统：" class="headerlink" title="Mac 或 Linux 系统："></a>Mac 或 Linux 系统：</h6><p>打开命令行窗口并执行如下命令将前面下载的 composer.phar 文件移动到 /usr/local/bin/ 目录下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure><h6 id="Windows-系统："><a href="#Windows-系统：" class="headerlink" title="Windows 系统："></a>Windows 系统：</h6><p>1、找到并进入 PHP 的安装目录（和你在命令行中执行的 php 指令应该是同一套 PHP）。<br>2、将 composer.phar 复制到 PHP 的安装目录下面，也就是和 php.exe 在同一级目录。<br>3、在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@php &quot;%~dp0composer.phar&quot; %*</span><br></pre></td></tr></table></figure><p>最后重新打开一个命令行窗口试一试执行 composer –version 看看是否正确输出版本号。<br>如图所示：<br><img src="http://olixffhc0.bkt.clouddn.com/yii-install1.PNG" alt="安装成功图片"></p><p>提示：不要忘了经常执行 composer selfupdate 以保持 Composer 一直是最新版本哦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer selfupdate//命令行中执行</span><br></pre></td></tr></table></figure><h4 id="Packagist-镜像使用方法"><a href="#Packagist-镜像使用方法" class="headerlink" title="Packagist 镜像使用方法"></a>Packagist 镜像使用方法</h4><p>系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一”<br>单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二”</p><h5 id="方法一：-修改-composer-的全局配置文件（推荐方式）"><a href="#方法一：-修改-composer-的全局配置文件（推荐方式）" class="headerlink" title="方法一： 修改 composer 的全局配置文件（推荐方式）"></a>方法一： 修改 composer 的全局配置文件（推荐方式）</h5><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><h5 id="方法二：-修改当前项目的-composer-json-配置文件："><a href="#方法二：-修改当前项目的-composer-json-配置文件：" class="headerlink" title="方法二： 修改当前项目的 composer.json 配置文件："></a>方法二： 修改当前项目的 composer.json 配置文件：</h5><p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure><p>上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：<br>“repositories”: {<br>    “packagist”: {<br>        “type”: “composer”,<br>        “url”: “<a href="https://packagist.phpcomposer.com&quot;" target="_blank" rel="noopener">https://packagist.phpcomposer.com&quot;</a><br>    }<br>}</p><h5 id="镜像原理："><a href="#镜像原理：" class="headerlink" title="镜像原理："></a>镜像原理：</h5><p>一般情况下，安装包的数据（主要是 zip 文件）一般是从 github.com 上下载的，安装包的元数据是从 packagist.org 上下载的。</p><p>然而，由于众所周知的原因，国外的网站连接速度很慢，并且随时可能被“墙”甚至“不存在”。</p><p>“Packagist 中国全量镜像”所做的就是缓存所有安装包和元数据到国内的机房并通过国内的 CDN 进行加速，这样就不必再去向国外的网站发起请求，从而达到加速 composer install 以及 composer update 的过程，并且更加快速、稳定。因此，即使 packagist.org、github.com 发生故障（主要是连接速度太慢和被墙），你仍然可以下载、更新安装包。</p><h3 id="开始使用Composer-安装yii"><a href="#开始使用Composer-安装yii" class="headerlink" title="开始使用Composer 安装yii"></a>开始使用Composer 安装yii</h3><p>打开命令行，切换到一个可通过 Web 访问的目录（如我的是d:wamp/www），执行如下命令即可安装 Yii ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">composer global require &quot;fxp/composer-asset-plugin:^1.2.0&quot;</span><br><span class="line"></span><br><span class="line">composer create-project --prefer-dist yiisoft/yii2-app-basic yiishop</span><br></pre></td></tr></table></figure><p>第一条命令安装 Composer asset plugin， 它是通过 Composer 管理 bower 和 npm 包所必须的，此命令全局生效，一劳永逸。 第二条命令会将 Yii 安装在名为 yiishop 的目录中。如果你想使用其它目录名称，你可以选择其他目录名称。</p><p>注意: 在安装过程中 Composer 可能会询问你 GitHub 账户的认证信息，因为可能在使用中超过了 GitHub API （对匿名用户的）使用限制。因为 Composer 需要为所有扩展包从 GitHub 中获取大量信息，所以超限非常正常。（译注：也意味着作为程序猿没有 GitHub 账号，就真不能愉快地玩耍了）登陆 GitHub 之后可以得到更高的 API 限额，这样 Composer 才能正常运行。</p><p>如下图所示：<br><img src="http://olixffhc0.bkt.clouddn.com/yii-install2.PNG" alt="需要github token"></p><p>我们需要提供一个githtb token 供Composer检索使用<br>具体操作：<br>进入 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> 点击 「Generate new token」 新建一个 Token，选择默认新建就行，然后就会得到一个 Token，然后输入这个值就 OK 了。</p><p>最后等待就可以了，安装成功如下图：<br><img src="http://olixffhc0.bkt.clouddn.com/yii-install4.PNG" alt="安装yii成功"></p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p><a href="http://www.yiichina.com/doc/guide/2.0/start-installation#installing-via-composer" target="_blank" rel="noopener">yii中文社区</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 Composer 安装&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>memcache 内存缓存技术</title>
    <link href="https://vonfly.github.io/2017/05/05/memcache/"/>
    <id>https://vonfly.github.io/2017/05/05/memcache/</id>
    <published>2017-05-05T07:32:54.000Z</published>
    <updated>2018-08-22T11:54:19.385Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="缓存技术" scheme="https://vonfly.github.io/categories/%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>coreseek中文检索引擎</title>
    <link href="https://vonfly.github.io/2017/05/04/coreseek/"/>
    <id>https://vonfly.github.io/2017/05/04/coreseek/</id>
    <published>2017-05-04T06:32:27.000Z</published>
    <updated>2018-08-22T11:54:19.381Z</updated>
    
    <content type="html"><![CDATA[<p>在 Centos6.5 上编译安装coreseek以及配置<br><a id="more"></a></p><h2 id="下载对应安装包，并解压"><a href="#下载对应安装包，并解压" class="headerlink" title="下载对应安装包，并解压"></a>下载对应安装包，并解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar zxvf coreseek-3.2.14.tar.gz</span><br></pre></td></tr></table></figure><h2 id="先进入mmseg-3-2-14目录安装中文分词"><a href="#先进入mmseg-3-2-14目录安装中文分词" class="headerlink" title="先进入mmseg-3.2.14目录安装中文分词"></a>先进入mmseg-3.2.14目录安装中文分词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ls</span><br><span class="line"># cd coreseek-3.2.14/mmseg-3.2.14/</span><br><span class="line">//检测环境配置是否会报错</span><br><span class="line"># ./configure --prefix=/usr/local/mmseg</span><br></pre></td></tr></table></figure><p>编译过程中报了一个config.status:error:cannot find input file:src/Makeefile.in这个的错误，然后运行以下指令再次编译就能通过了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># aclocal</span><br><span class="line"># libtoolize --force</span><br><span class="line"># automake --add-missing</span><br><span class="line"># autoconf</span><br><span class="line"># autoheader</span><br><span class="line"># make clean</span><br><span class="line"># ./configure --prefix=/usr/local/mmseg</span><br><span class="line">//开始编译</span><br><span class="line"># make</span><br><span class="line">//进行安装</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><p>到这里就安装完了mmseg</p><h2 id="先进入csft-3-2-14目录安装csft"><a href="#先进入csft-3-2-14目录安装csft" class="headerlink" title="先进入csft-3.2.14目录安装csft"></a>先进入csft-3.2.14目录安装csft</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ls</span><br><span class="line"># cd csft-3.2.14/</span><br><span class="line">//检测环境配置是否会报错</span><br><span class="line"># ./configure --prefix=/usr/local/coreseek --with-mysql=/usr/local/mysql --with-mmseg=/usr/local/mmseg --with-mmseg-includes=/usr/local/mmseg/include/mmseg/ --with-mmseg-libs=/usr/local/mmseg/lib/</span><br><span class="line"></span><br><span class="line"># make</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><p>到这里就安装完了csft</p><h2 id="配置coreseek"><a href="#配置coreseek" class="headerlink" title="配置coreseek"></a>配置coreseek</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//进入配置目录</span><br><span class="line"># cd /usr/local/coreseek/etc</span><br><span class="line">//复制一份配置文件并改名为csft.conf，因为coreseek默认加载的配置文件是csft.conf</span><br><span class="line"># cp sphinx.conf.dist csft.conf</span><br></pre></td></tr></table></figure><p>vim csft.conf，修改为：<br>如下图：</p><h3 id="创建全文索引"><a href="#创建全文索引" class="headerlink" title="创建全文索引"></a>创建全文索引</h3><p>配置文件没有错误了，就可以开始创建全文索引了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/coreseek/bin/indexer --all</span><br></pre></td></tr></table></figure><h2 id="用PHP连接使用Sphinx"><a href="#用PHP连接使用Sphinx" class="headerlink" title="用PHP连接使用Sphinx"></a>用PHP连接使用Sphinx</h2><p>1、先到<a href="http://pecl.php.net/package/sphinx下载所需要的扩展库" target="_blank" rel="noopener">http://pecl.php.net/package/sphinx下载所需要的扩展库</a><br>2、解压文件和进入解压目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># tar zxvf sphinx-1.3.3.tgz</span><br><span class="line"># cd sphinx-1.3.3</span><br></pre></td></tr></table></figure><p>3、调用phpize，生成configure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意此处是你服务器上php安装的地址</span><br><span class="line"># /usr/local/php/bin/phpize</span><br></pre></td></tr></table></figure><p>4、检测环境配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./configure --with-php-config=/usr/local/php/bin/php-config --with-sphinx</span><br></pre></td></tr></table></figure><p>报错，如下图：<br><img src="http://olixffhc0.bkt.clouddn.com/shhinx.jpg" alt="报错图片"><br>5、进入以下目录(之前coreseek-3.2.14的解压目录)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/src/coreseek-3.2.14/csft-3.2.14/api/libsphinxclient</span><br><span class="line"># ./configure</span><br><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>6、重新到sphinx-1.3.3目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/src/sphinx-1.3.3</span><br><span class="line"># ./configure --with-php-config=/usr/local/php/bin/php-config --with-sphinx</span><br><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>执行结果如下图：<br><img src="http://olixffhc0.bkt.clouddn.com/shhinx1.jpg" alt="成功"><br>7、修改php下php.ini文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vim /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure><p>…….<br>; For example, on Windows:<br>;<br>;   extension=msql.dll<br>;<br>; … or under UNIX:<br>;<br>;   extension=msql.so<br>extension=sphinx.so     //添加如下这行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Centos6.5 上编译安装coreseek以及配置&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://vonfly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>mongodb-php结合开发</title>
    <link href="https://vonfly.github.io/2017/05/03/mongodb-php/"/>
    <id>https://vonfly.github.io/2017/05/03/mongodb-php/</id>
    <published>2017-05-03T13:18:38.000Z</published>
    <updated>2018-08-22T11:54:19.386Z</updated>
    
    <content type="html"><![CDATA[<p>想要在PHP中调用mongobd需要安装mongodb的php扩展</p><a id="more"></a><h3 id="下载最新的php-mongodb扩展源码"><a href="#下载最新的php-mongodb扩展源码" class="headerlink" title="下载最新的php mongodb扩展源码"></a>下载最新的php mongodb扩展源码</h3><p><a href="http://pecl.php.net/package/mongo" target="_blank" rel="noopener">http://pecl.php.net/package/mongo</a></p><h3 id="把扩展编译到php中"><a href="#把扩展编译到php中" class="headerlink" title="把扩展编译到php中"></a>把扩展编译到php中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//先解压文件</span><br><span class="line"># tar xzf mongo-1.2.6.tgz</span><br><span class="line">//进入解压后的目录</span><br><span class="line"># cd mongo-1.2.6</span><br><span class="line">//运行phpize来准备编译扩展环境</span><br><span class="line"># /usr/local/php/bin/phpize</span><br><span class="line"></span><br><span class="line">//查看编译参数</span><br><span class="line"># ./configure -h</span><br><span class="line">//开始编译(--with-php-config参数是告诉配置脚本php-cofig这个程序的路径)</span><br><span class="line"># ./configure --with-php-config=/usr/local/php/bin/php-config --enable-mongo</span><br><span class="line">//安装</span><br><span class="line"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>//打开配置文件php.ini，把mongodb模块打开（即增加extension=mongo.so）<br>vim /usr/local/php/etc/php.ini<br>….<br>extension=msql.so<br>extension=mongo.so</p><p>接下来重启apache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/apache2/bin/apachect1 restart</span><br></pre></td></tr></table></figure><p>最后查看php是否已经支持mongodb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/apache2/htdocs/</span><br></pre></td></tr></table></figure><p>vim phpinfo.php<br>&lt;?php<br>phpinfo();<br>最后浏览器访问该页面，搜索mongo，看是否有</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><p>在php的mongo扩展中，提供了4类接口(对象)：<br>1、针对mongodb连接的操作：Mongo<br>2、针对mongodb中数据库的操作：MongoDB<br>3、针对mongodb中collection的操作：MongoCollection<br>4、针对查询结果集的操作：MongoCursor</p><h4 id="PHP连接mongodb数据库"><a href="#PHP连接mongodb数据库" class="headerlink" title="PHP连接mongodb数据库"></a>PHP连接mongodb数据库</h4><p>文件conn.php的内容：<br>&lt;?php<br>$conn = new Mongo(‘mongodb://test1:123@localhost:27017/test’);<br>$db = $conn-&gt;test;<br>?&gt;</p><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>&lt;?php<br>include “conn.php”;<br>$c1 = $db-&gt;c1;<br>根据地址栏传过来_id查询数据<br>//db.c1.find({_id:ObjectId(“dfd1dfjfkee”)});<br>$oid = $_GET[‘oid’];<br>$objectId = new MongoId($oid);<br>$arr = array(‘_id’=&gt;$objectId);<br>$rs = $c1-&gt;find($arr);<br>var_dump($rs);<br>$conn-&gt;close();    //关闭连接</p><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><p>&lt;?php<br>include “conn.php”;<br>$c1 = $db-&gt;c1;<br>//db.c1.insert({name:”user1000”});<br>$arr = array(‘name’=&gt;’user1000’);<br>if($c1-&gt;insert($arr)){<br>    echo “插入成功！”;<br>}else{<br>    echo “插入失败！”;<br>}<br>$conn-&gt;close();    //关闭连接</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>&lt;?php<br>include “conn.php”;<br>$c1 = $db-&gt;c1;<br>//db.c1.remove({name:”user1000”});<br>$arr = array(‘name’=&gt;’user1000’);<br>if($c1-&gt;remove($arr)){<br>    echo “删除成功！”;<br>}else{<br>    echo “删除失败！”;<br>}<br>$conn-&gt;close();    //关闭连接</p><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>&lt;?php<br>include ‘conn.php’;<br>$c1 = $db-&gt;c1;<br>//db.c1.update({name:”user1”}, {$set:{name:”user100”,sex:1}});<br>$sarr = array(‘name’=&gt;’user1’);<br>$darr = array(‘$set’=&gt;array(‘name’=&gt;’user100’, ‘sex’=&gt;1));<br>$opts = array(‘upsert’=&gt;0, ‘multiple’=&gt;1);<br>if($c1-&gt;update($sarr, $darr, $opts)){<br>    echo “修改成功！”;<br>}else{<br>    echo “修改失败！”;<br>}<br>$conn-&gt;close();    //关闭连接</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要在PHP中调用mongobd需要安装mongodb的php扩展&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://vonfly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
      <category term="php" scheme="https://vonfly.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据库一些简单操作</title>
    <link href="https://vonfly.github.io/2017/05/02/mongodb-operation/"/>
    <id>https://vonfly.github.io/2017/05/02/mongodb-operation/</id>
    <published>2017-05-02T15:13:18.000Z</published>
    <updated>2018-08-22T11:54:19.386Z</updated>
    
    <content type="html"><![CDATA[<p>mongodb一些基本操作<br><a id="more"></a></p><h2 id="进入-登录-客户端操作"><a href="#进入-登录-客户端操作" class="headerlink" title="进入(登录)客户端操作"></a>进入(登录)客户端操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/mongodb/bin/mongo</span><br></pre></td></tr></table></figure><h3 id="控制台-客户端-中的基本操作命令"><a href="#控制台-客户端-中的基本操作命令" class="headerlink" title="控制台(客户端)中的基本操作命令"></a>控制台(客户端)中的基本操作命令</h3><p>切换数据库：use test;<br>显式创建数据库：db.createCollection(“a1”);<br>查看当前操作的数据库：db;<br>查看用户列表：db.system.users.find();<br>查看所有用户：show users;<br>查看所有数据库：show dbs;<br>查看所有集合：show collections;<br>删除当前数据库：db.dropDatabase();<br>删除集合：db.user.drop();    //删除user集合<br>想知道mongodb支持哪些命令：help;<br>想知道当前数据库支持哪些方法：db.help();<br>想知道当前集合支持哪些方法：db.user.help();    //查看user集合支持的方法<br>终端清屏：cls</p><h3 id="集合的增删改查操作"><a href="#集合的增删改查操作" class="headerlink" title="集合的增删改查操作"></a>集合的增删改查操作</h3><p>查询user集合的记录<br>db.user.find();    //查询全部记录<br>db.user.find({name:”vonfly”});    //查询name为vonfly的记录<br>db.user.findOne({name:”vonfly”});    //查询name为vonfly的第一条记录</p><p>向user集合插入一条记录<br>db.user.insert({name:”vonfly”});</p><p>修改记录(把name为vonfly的修改name为test)<br>db.user.update({name:”vonfly”}, {$set: {name:”test”} });</p><p>删除记录<br>db.user.remove({name:”vonfly”});    //删除name为vonfly的记录<br>db.user.remove();    //删除全部记录</p><h3 id="增删改查的高级应用"><a href="#增删改查的高级应用" class="headerlink" title="增删改查的高级应用"></a>增删改查的高级应用</h3><h4 id="Capped-Collectioin-固定集合"><a href="#Capped-Collectioin-固定集合" class="headerlink" title="Capped Collectioin(固定集合)"></a>Capped Collectioin(固定集合)</h4><p>属性及用法<br>属性1：对固定集合进行插入速度极快<br>属性2：按照插入顺序的查询输出速度极快<br>属性3：能够在插入最新数据时，淘汰最早的数据</p><p>用法1：储存日志信息<br>用法2：缓存一些少量的文档</p><h5 id="固定集合的创建（需要显式创建）"><a href="#固定集合的创建（需要显式创建）" class="headerlink" title="固定集合的创建（需要显式创建）"></a>固定集合的创建（需要显式创建）</h5><p>//创建一个集合为vn_user的固定集合，大小为10000字节。还可以限定文档个数，加上max:100属性<br>db.createCollection(“vn_user”, {capped:true, size:10000});<br>注意：指定文档上限，必须指定大小。文档限制是在容量没满时进行淘汰，要是满了，就根据容量限制来进行淘汰</p><p>普通集合转换成固定集合<br>db.runCommand({converTocapped:”test”, size:10000});    //把test普通集合转换成固定集合，大小为10000字节</p><p>自然排序<br>固定集合文档按照插入顺序储存的，默认情况下查询就是按照插入顺序返回的，可以使用$natural调整返回顺序<br>db.my_collection.find().sort({“$natural”: 1});    //1表示默认顺序，-1则相反</p><p>判断是否为固定集合<br>db.test.isCapped();    //判断test集合是否为固定集合<br>db.test.stats();    //或者用此命令，对应”capped”:1就是固定集合</p><h4 id="GridFS大文件管理（使用mongofiles二进制程序）"><a href="#GridFS大文件管理（使用mongofiles二进制程序）" class="headerlink" title="GridFS大文件管理（使用mongofiles二进制程序）"></a>GridFS大文件管理（使用mongofiles二进制程序）</h4><p>GridFS是一种在mongodb中存储大二进制文件的机制。GridFS使用两个表来存储数据：其中files是包含数据对象；chunks是包含其他一些相关信息的二进制块。<br>使用的原因：<br>1、储存巨大的文件，比如视频、高清图片等<br>2、利用GridFS可以简化需求。<br>3、GridFS可以避免用户上传内容的文件系统出现问题<br>4、GridFS故障恢复和扩展很容易<br>5、GridFS不产生磁盘碎片</p><p>查看mongofiles支持对应的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># # /usr/local/mongodb/bin/mongofiles -h</span><br></pre></td></tr></table></figure><p>上传文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/mongodb/bin/mongofiles put test.tar.gz</span><br></pre></td></tr></table></figure><p>进入客户端，查看集合，会发现多了两个集合，fs.chunks和fs.files</p><p>下载文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/mongodb/bin/mongofiles get test.tar.gz</span><br></pre></td></tr></table></figure><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>查看查询语句的执行计划(类似查看mysql语句执行所用的时间和影响的行数，目的就是要对语句进行优化，看需不需要建立索引)，使用以下语句进行查看</p><p>db.user.find({name:”user1”}).explain();</p><h4 id="建立索引（普通索引）"><a href="#建立索引（普通索引）" class="headerlink" title="建立索引（普通索引）"></a>建立索引（普通索引）</h4><p>//在user集合的name上建立索引<br>db.user.ensureIndex({name:1});    //值1表示升序建立，-1表示降序建立索引</p><p>注意：当系统已经有大量数据时，创建索引会非常耗时，需要在后台执行，所以要指定参数background:true<br>db.user.ensureIndex({name:1}, {background:true});</p><h5 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h5><p>db.user.ensureIndex({name:1}, {unique:true});</p><h5 id="简单查看索引"><a href="#简单查看索引" class="headerlink" title="简单查看索引"></a>简单查看索引</h5><p>db.user.getIndexKeys();</p><h5 id="查看索引详细信息"><a href="#查看索引详细信息" class="headerlink" title="查看索引详细信息"></a>查看索引详细信息</h5><p>db.user.getIndexes();</p><h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><p>//删除user集合中的所有索引<br>db.user.dropIndexes();</p><p>//删除user集合中的name索引<br>db.user.dropIndex({name:1});</p><h3 id="优化器profile-慢查询日志功能"><a href="#优化器profile-慢查询日志功能" class="headerlink" title="优化器profile(慢查询日志功能)"></a>优化器profile(慢查询日志功能)</h3><p>mongodb database profiler 是一种慢查询日志功能，可以作为我们优化数据库的依据。</p><h4 id="开启profile功能"><a href="#开启profile功能" class="headerlink" title="开启profile功能"></a>开启profile功能</h4><p>级别的值为：0表示不开启，1表示慢命令(默认为&gt;100ms)，2表示记录所有命令</p><p>方法1：启动mongodb时加上–profile=1</p><p>方法2：在客户端调用db.setProfilingLevel(级别)命令来实时配置</p><p>说明：<br>1、profile信息是保存在system.profile中。我们可以通过db.getProfilingLevel()命令来获取当前的Profile级别<br>2、profile在级别为1时会记录慢命令，默认的慢查询时间为100ms，修改默认时间有两种方法：一种是启动mongodb时加上–profile=1和–slowms=10；  第二种方式是用命令db.setProfilingLevel(1)，表示如果查询耗时超过10毫秒，就会被记录下来<br>3、数据库profiler把数据写入 system.profile 集合中，该集合是一个 capped collection 。可以用普通的MongoDB查询语句查询 system.profile 集合得到profiler的输出。</p><h3 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h3><p>1、创建索引，在查询条件的字段上，或者排序条件的字段上创建索引，可以提高执行效率，如db.user.ensureIndex({name:1});<br>2、限定返回结果条数，使用limit()限定返回结果集的大小，可以减少database server的资源消耗，可以减少网络传输数据量。如db.user.find().limit(10);<br>3、查询使用到的字段，不要查询所有字段。如db.user.find({}, {name:1,age:1}).sort({age:-1}).limit(10);<br>4、采用cappedcollection(固定集合)，capped Collections比普通Collections的读写效率高<br>5、采用profiling(慢查询日志功能)，profiling功能肯定是会影响效率的，但是不太严重，原因是它使用的是system.profile来记录，system.profile是一个capped collection(固定集合)，这种collection在操作上有一些限制和特点，但是效率高</p><h2 id="mongodb主从集群"><a href="#mongodb主从集群" class="headerlink" title="mongodb主从集群"></a>mongodb主从集群</h2><p>mongodb支持在多个机器中通过异步复制达到故障转移和实现冗余。多机器中同一时刻只有一台是用于写操作。正是由于这个情况，为mongodb提供了数据一致性的保障。担当primary(主服务器)角色的机器能把读操作分发给slave(从服务器)。</p><h3 id="replica-sets复制（副本集）"><a href="#replica-sets复制（副本集）" class="headerlink" title="replica sets复制（副本集）"></a>replica sets复制（副本集）</h3><p>mongodb在1.6版本开发了replica set，主要增加了故障自动切换和自动修复成员节点，各个db之间数据完全一致，最为显著的区别在于，副本集没有固定的主节点，它是整个集群选举出的一个主节点，当其不工作时变更其他节点。（简单来说就是当主服务器挂了，那么剩余从服务器会自动选举一个出来做主服务器）</p><h3 id="部署replica-sets（测试）"><a href="#部署replica-sets（测试）" class="headerlink" title="部署replica sets（测试）"></a>部署replica sets（测试）</h3><p>1、启动两个实例（模拟两个mongodb服务器）<br>2、创建数据文件存储路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p /usr/local/mongodb/data/data1/</span><br><span class="line"># mkdir -p /usr/local/mongodb/data/data2/</span><br></pre></td></tr></table></figure><p>3、创建日志文件路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p /usr/local/mongodb/log/dblogs1</span><br><span class="line"># mkdir -p /usr/local/mongodb/log/dblogs2</span><br></pre></td></tr></table></figure><p>4、创建key目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p /usr/local/mongodb/key/</span><br><span class="line"># cd /usr/local/mongodb/key/</span><br><span class="line"># touch key1</span><br><span class="line"># touch key2</span><br><span class="line"># echo &quot;123456&quot; &gt; key1</span><br><span class="line"># echo &quot;123456&quot; &gt; key2</span><br><span class="line"># chmod 600 *</span><br></pre></td></tr></table></figure><p>5、启动一个实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/mongodb/bin/mongod --replSet rs1 --keyFile=/usr/local/mongodb/key/key1 --port 200001 --dbpath=/usr/local/mongodb/data/data1/ --logpath=/usr/local/mongodb/log/dblogs1 --fork</span><br></pre></td></tr></table></figure><p>再启动一个实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/mongodb/bin/mongod --replSet rs1 --keyFile=/usr/local/mongodb/key/key2 --port 200002 --dbpath=/usr/local/mongodb/data/data2/ --logpath=/usr/local/mongodb/log/dblogs2 --fork</span><br></pre></td></tr></table></figure><p>6、配置及初始化replica set（登录一台机器进行配置）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/mongodb/bin/mongo --port 200001</span><br></pre></td></tr></table></figure><p>进入后，直接配置（直接输入）即可<br>config_rs1={<br>    _id:”rs1”,<br>    members:[<br>        {_id:0, host:”localhost:200001”, priority:1},<br>        {_id:1, host:”localhost:200002”, priority:2}<br>    ]<br>}</p><p>最后初始化配置<br>rs.initiate(config_rs1);</p><p>这样就配置好了，端口号为200002的就相当于主服务器(因为优先级priority比较大)，端口号200001就是从服务器，主服务器可以就行增删改查数据，从服务器就只能查询数据</p><p>登录从服务器客户端输入命令，这样才有读的权限<br>rs.slaveOk();</p><p>扩展：<br>查看副本集状态命令：rs.status();</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.mongoing.com/manual-zh/tutorial/insert-documents.html" target="_blank" rel="noopener">mongodb中文社区</a><br><a href="http://www.runoob.com/mongodb/mongodb-capped-collections.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mongodb一些基本操作&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://vonfly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据库</title>
    <link href="https://vonfly.github.io/2017/05/01/mongodb/"/>
    <id>https://vonfly.github.io/2017/05/01/mongodb/</id>
    <published>2017-05-01T10:29:41.000Z</published>
    <updated>2018-08-22T11:54:19.387Z</updated>
    
    <content type="html"><![CDATA[<p>NoSQL数据库的优缺点<br>优点：简单的扩展、快速的读写、低廉的成本、灵活的数据模型<br>不足：不提供对SQL的支持、支持的特性不够丰富、现有的产品不够成熟</p><a id="more"></a><h2 id="Mongodb特性"><a href="#Mongodb特性" class="headerlink" title="Mongodb特性"></a>Mongodb特性</h2><p>mongodb的特点是高性能、易部署、易使用，存储数据非常方便，主要的特性有：<br>面向集合存储，易于存储对象类型的数据<br>模式自由<br>支持动态查询<br>支持完全索引，包含内部对象<br>支持复制和故障恢复<br>使用高效的二进制数据存储，包括大型对象（如视频等）<br>自动处理碎片，以支持云计算层次的扩展性<br>文件存储格式为BSON（一种JSON的扩展）</p><h2 id="mongobd体系结构"><a href="#mongobd体系结构" class="headerlink" title="mongobd体系结构"></a>mongobd体系结构</h2><p>逻辑结构关系对比<br>关系型数据库：<br>mysql数据库(database)、表(table)、记录(rows)三个层次概念组成<br>非关系型数据库：<br>mongodb数据库(database)、集合(collection)、文档对象(document)三个层次概念组成</p><h2 id="mongodb的安装（安装较简单，不用源码编译安装，直接拷贝bin目录到你的安装目录即可）"><a href="#mongodb的安装（安装较简单，不用源码编译安装，直接拷贝bin目录到你的安装目录即可）" class="headerlink" title="mongodb的安装（安装较简单，不用源码编译安装，直接拷贝bin目录到你的安装目录即可）"></a>mongodb的安装（安装较简单，不用源码编译安装，直接拷贝bin目录到你的安装目录即可）</h2><p>环境：Centos6.5<br>1、到<a href="http://www.mongodb.org" target="_blank" rel="noopener">mongodb官网</a>下载对应的安装包<br>2、解压压缩包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar zxvf mongodb-linux-x86_64-amazon-3.4.4.tgz</span><br></pre></td></tr></table></figure><p>3、拷贝bin目录到指定文件夹(我这里安装到/usr/local/mongodb)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd mongodb-linux-x86_64-amazon-3.4.4/</span><br><span class="line"># rsync -a bin /usr/local/mongodb</span><br></pre></td></tr></table></figure><p>4、进入到安装目录（/usr/local/mongodb），创建专门放置数据库的目录,记载日志文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/mongodb/</span><br><span class="line">//创建放置数据库的目录</span><br><span class="line"># mkdir data</span><br><span class="line">//创建记载日志文件</span><br><span class="line"># touch dblogs</span><br></pre></td></tr></table></figure><p>至此mongodb已经安装完毕</p><p>扩展：mongodb开机自启动<br>将mongodb启动项目加入rc.local保证mongodb在服务器开机时启动<br>法1：<br>vim /etc/rc.local<br>加入<br>/usr/local/mongodb/bin/mongod –dbpath=/usr/local/mongodb/data/ –logpath=/usr/local/mongodb/dblogs –fork</p><p>法2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/dblogs --fork&quot; &gt;&gt; /etc/rc.local</span><br></pre></td></tr></table></figure><h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/dblogs --fork</span><br></pre></td></tr></table></figure><p>启动命令常用参数选项说明：<br>–dbpath    //指定数据库的目录<br>–auth    //用户验证<br>–port    //指定数据库的端口，默认是27017<br>–bind_ip    //绑定ip<br>–directoryperdb    //为每个bd创建一个独立子目录<br>–logpath    //指定日志存放目录<br>–logappend    //指定日志生成方式(追加/覆盖)<br>–pidfilepath    //指定进程文件路径，如果不知道，将不产生进程文件<br>–keyFile    //集群模式的关键标识<br>–journal    //启用日志<br>–nssize    //指定.ns文件的大小，单位MB，默认是16M，最大2GB<br>–maxConns    //最大的并发连接数<br>–notablescan    //不允许进行表扫描<br>–noprealloc    //关闭数据文件的预分配功能<br>–fork    //以后台Daemon形式运行服务<br>更多参数选项利用mongod –help进行查看</p><h3 id="关闭mongodb"><a href="#关闭mongodb" class="headerlink" title="关闭mongodb"></a>关闭mongodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//法1</span><br><span class="line"># pkill mongod</span><br><span class="line">//法2</span><br><span class="line"># killall mongod</span><br></pre></td></tr></table></figure><p>最好用上面两种的一种，如果用kill -9 进程id，会重启不了mongodb，需要到data目录下把锁文件(mongod.lock)删除掉，具体操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/mongodb/data</span><br><span class="line"># rm -rf mongod.lock //把锁文件删除掉</span><br></pre></td></tr></table></figure><h3 id="用户授权（即登录需要用户名和密码）"><a href="#用户授权（即登录需要用户名和密码）" class="headerlink" title="用户授权（即登录需要用户名和密码）"></a>用户授权（即登录需要用户名和密码）</h3><p>1、每个mongodb实例中的数据库都有许多用户，如果启用了安全性认证后，只有数据库认证的用户才可以进行读写操作。mongodb默认的启动是不验证用户名和密码的，启动mongodb后，可以直接用mongo连接上来，对所有的库具有root权限。所以启动的时候指定参数，可以阻止客户端的访问和连接，只需在启动服务时指定 –auth参数即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --auth --logpath=/usr/local/mongodb/dblogs --fork</span><br></pre></td></tr></table></figure><p>2、现在还是可以通过/usr/local/mongodb/bin/mongo可以直接进入客户端操作的<br>因为现在没有管理员帐号，mongodb分两种管理员，一种为超级管理员，一种为数据库管理员(即只对自己的数据库有权限)</p><p>2.1、先通过/usr/local/mongodb/bin/mongo进入到客户端创建帐号</p><p>2.2、创建超级管理员（一定要进入admin数据库创建才行）<br>//先进入admin数据库<br>use admin;<br>//创建帐号root,密码为123<br>db.addUser(“root”, “123”);</p><p>2.3、创建数据库管理员<br>比如我需要为test数据库创建管理员，那我需要进入到test数据库先<br>use test;<br>db.addUser(“test”, “123”);</p><p>2.4测试登录<br>创建好帐号后，退出客户端，再重新登录进入客户端<br>exit;<br>/usr/local/mongodb/bin/mongo -uroot -p123 localhost:27017/admin    //超级管理员登录进入admin数据库</p><p>2.5总结<br>超级管理员需要进入admin数据库进行创建，数据库管理员需要进入到对应的数据库进行创建。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.mongoing.com/manual-zh/tutorial/insert-documents.html" target="_blank" rel="noopener">mongodb中文社区</a><br><a href="http://www.runoob.com/mongodb/mongodb-capped-collections.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NoSQL数据库的优缺点&lt;br&gt;优点：简单的扩展、快速的读写、低廉的成本、灵活的数据模型&lt;br&gt;不足：不提供对SQL的支持、支持的特性不够丰富、现有的产品不够成熟&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://vonfly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="nosql" scheme="https://vonfly.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>mysql-主从复制</title>
    <link href="https://vonfly.github.io/2017/03/20/mysql-master-slave/"/>
    <id>https://vonfly.github.io/2017/03/20/mysql-master-slave/</id>
    <published>2017-03-20T01:27:11.000Z</published>
    <updated>2018-08-22T11:54:19.388Z</updated>
    
    <content type="html"><![CDATA[<p>mysql主从复制和慢查询日志说明<br><a id="more"></a></p><h4 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h4><h5 id="MySQL-grant用户授权（先登录主服务器数据库进行用户授权）"><a href="#MySQL-grant用户授权（先登录主服务器数据库进行用户授权）" class="headerlink" title="MySQL grant用户授权（先登录主服务器数据库进行用户授权）"></a>MySQL grant用户授权（先登录主服务器数据库进行用户授权）</h5><p>在主服务器设置授权用户（授权所有权限关于所有数据库中所有表，给user这个用户从主机为192.168.10.2登录，密码为123456）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//方法1：</span><br><span class="line">mysql&gt; grant all on *.* to user@192.168.10.2 identified by &apos;123456&apos;;</span><br><span class="line">//方法2：</span><br><span class="line">mysql&gt; grant replication slave on *.* to user@192.168.10.2 identified by &apos;123456&apos;;</span><br><span class="line"></span><br><span class="line">//查看用户授权表（即mysql数据库中的user表）</span><br><span class="line">mysql&gt; select user,host,password from mysql.user;</span><br></pre></td></tr></table></figure></p><h5 id="修改主数据库服务器的配置文件my-cnf，开启big-log日志，并设置server-id的值"><a href="#修改主数据库服务器的配置文件my-cnf，开启big-log日志，并设置server-id的值" class="headerlink" title="修改主数据库服务器的配置文件my.cnf，开启big-log日志，并设置server-id的值"></a>修改主数据库服务器的配置文件my.cnf，开启big-log日志，并设置server-id的值</h5><p>log-bin=mysql-bin<br>server-id=1</p><h5 id="备份主服务器的数据库"><a href="#备份主服务器的数据库" class="headerlink" title="备份主服务器的数据库"></a>备份主服务器的数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//清除bin-log日志</span><br><span class="line">mysql&gt; reset master;</span><br><span class="line">//备份数据库</span><br><span class="line">mysql&gt; /usr/local/mysql/bin/mysqldump -uroot -p123456 test -l -F &gt; /tmp/test.sql</span><br></pre></td></tr></table></figure><h5 id="同步从服务器上的数据"><a href="#同步从服务器上的数据" class="headerlink" title="同步从服务器上的数据"></a>同步从服务器上的数据</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//先从主服务器复制一份test.sql到从服务器(192.168.10.2)下的tmp目录</span><br><span class="line">[root@localhost]<span class="comment"># scp /tmp/test.sql 192.168.10.2:/tmp/</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//登录从服务器数据库</span><br><span class="line">mysql&gt; /usr/local/mysql/bin/mysql -uroot -p123456 test</span><br><span class="line">//清空所有的big-log日志</span><br><span class="line">mysql&gt; reset master;</span><br><span class="line">//进行导入同步数据</span><br><span class="line">mysql&gt; /usr/local/mysql/bin/mysql -uroot -p123456 test &lt; /tmp/test.sql</span><br></pre></td></tr></table></figure><h5 id="配置从服务器的配置文件my-cnf"><a href="#配置从服务器的配置文件my-cnf" class="headerlink" title="配置从服务器的配置文件my.cnf"></a>配置从服务器的配置文件my.cnf</h5><p>log-bin=mysql-bin<br>server-id=2<br>master-host=192.168.10.1<br>master-user=user<br>master-password=123456<br>master-port=3306</p><h5 id="重启从服务器mysql-先关闭mysql，再重启mysql"><a href="#重启从服务器mysql-先关闭mysql，再重启mysql" class="headerlink" title="重启从服务器mysql(先关闭mysql，再重启mysql)"></a>重启从服务器mysql(先关闭mysql，再重启mysql)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//关闭方法1</span><br><span class="line">pkill mysqld</span><br><span class="line"></span><br><span class="line">//关闭方法2</span><br><span class="line">ps -aux | grep mysql//先查看进程pid</span><br><span class="line">kill -15 pid//正常关闭</span><br><span class="line"></span><br><span class="line">//重启mysql</span><br><span class="line">/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</span><br></pre></td></tr></table></figure><h5 id="查看从服务器是否已经同步了（查看相应的主从复制进程列表）"><a href="#查看从服务器是否已经同步了（查看相应的主从复制进程列表）" class="headerlink" title="查看从服务器是否已经同步了（查看相应的主从复制进程列表）"></a>查看从服务器是否已经同步了（查看相应的主从复制进程列表）</h5><p>方法1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show slave status\G</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br>Slave_IO_Running:Yes    //此进程负责读取主服务器上的big-log日志，并且写入到从服务器上的big-log日志<br>Slave_SQL_Running:Yes    //此进程负责读取并且执行big-log日志<br>表示已经同步了（注意：以上两个都为Yes则表示成功，否则失败，错误原因可以从”last_error”字段的值中看到）</p><p>方法2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show processlist\G</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br>state:waiting for master to send event    //表示连接主数据库为成功，而且成功获取big-log<br>state:has read all ready log;waiting for the slave i/o thread to update it    //表示成功执行big-log日志，正在等待着再次连接主数据库并更新获取big-log日志<br>表示已经同步了</p><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p>从数据库常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;//启动复制进程</span><br><span class="line">mysql&gt; stop slave;//停止复制进程</span><br><span class="line">mysql&gt; show slave status;//查看数据库状态</span><br><span class="line">mysql&gt; change master to//动态改变服务器的配置</span><br><span class="line">mysql&gt; show processlist//查看数据库运行进程</span><br></pre></td></tr></table></figure></p><p>从数据库无法同步：<br>Show slave status显示slave_sql_running为No,seconds_behind_master为null<br>原因：<br>1、程序可能在slave上进行了写操作<br>2、也可能是slave机器(从服务器)重启后，事务回滚造成的</p><p>解决方法1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; slave stop;</span><br><span class="line">mysql&gt; set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</span><br><span class="line">mysql&gt; slave start;</span><br></pre></td></tr></table></figure></p><p>解决方法2：<br>停止从服务器复制进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; slave stop;</span><br></pre></td></tr></table></figure></p><p>查看主服务器当前的bin-log日志名和偏移量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;//下一步需要用到日志名称和偏移量</span><br></pre></td></tr></table></figure></p><p>如图所示</p><p>最后到slave(从)服务器上执行手动同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; change master to</span><br><span class="line">master_host=&quot;192.168.10.1&quot;,</span><br><span class="line">master_user=&quot;user&quot;,</span><br><span class="line">master_password=&quot;123456&quot;,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_log_file=&quot;mysql-bin.000003&quot;,//对应上一步的日志名称</span><br><span class="line">master_log_pos=98;//对应上一步的偏移量</span><br><span class="line"></span><br><span class="line">//启动slave(复制进程)</span><br><span class="line">mysql&gt; slave start;</span><br><span class="line">//最后再查看数据库状态</span><br><span class="line">mysql&gt; show slave status\G</span><br></pre></td></tr></table></figure></p><h4 id="MYSQL-bin-log日志"><a href="#MYSQL-bin-log日志" class="headerlink" title="MYSQL bin-log日志"></a>MYSQL bin-log日志</h4><h5 id="开启MYSQL-bin-log日志"><a href="#开启MYSQL-bin-log日志" class="headerlink" title="开启MYSQL bin-log日志"></a>开启MYSQL bin-log日志</h5><p>vim /etc/my.cnf<br>[mysqld]<br>….<br>log-bin=mysql-bin</p><h5 id="bin-log日志相关mysql指令"><a href="#bin-log日志相关mysql指令" class="headerlink" title="bin-log日志相关mysql指令"></a>bin-log日志相关mysql指令</h5><p>可以查看是否开启bin-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%bin%&quot;;</span><br></pre></td></tr></table></figure></p><p>生成一个最新的bin-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush logs;</span><br></pre></td></tr></table></figure></p><p>查看big-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show binary logs;</span><br></pre></td></tr></table></figure></p><p>查看最后一个big-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br></pre></td></tr></table></figure></p><p>清空所有的big-log日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; reset master;</span><br></pre></td></tr></table></figure></p><p>使用mysqlbiglog来查看big-log日志（打开mysql-bin.000002日志）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysqlbinlog --no-defaults mysql-bin.000002</span></span><br></pre></td></tr></table></figure></p><p>如果不加参数–no-defaults会报错，报错内容是说字符集有问题</p><h5 id="mysql备份和bin-log日志结合使用"><a href="#mysql备份和bin-log日志结合使用" class="headerlink" title="mysql备份和bin-log日志结合使用"></a>mysql备份和bin-log日志结合使用</h5><p>例子：</p><p>1、对test数据库进行备份数据，备份完成的同时生成一个新的log-bin日志文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysqldump -uroot -p123456 test -l -F &gt; /tmp/test.sql</span></span><br></pre></td></tr></table></figure></p><p>参数说明：-l为读锁(备份期间所有人都不能进行写的操作，但是可以进行读的操作)、-F(即相当于执行了flush logs指令),可以重新生成新的日志文件，其中包括log-bin日志</p><p>2、在备份完成后又添加了一些数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into t1 values(3);</span><br><span class="line">mysql&gt; insert into t1 values(4);</span><br><span class="line">mysql&gt; insert into t1 values(5);</span><br></pre></td></tr></table></figure></p><p>3、此时突然数据库损坏或者人为删除<br>模拟人为删除表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop table t1;</span><br></pre></td></tr></table></figure></p><p>如何恢复数据？<br>步骤一，先用已经备份的t1.sql来恢复数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysql -uroot -p123456 test -f &lt; /tmp/test.sql</span></span><br><span class="line">参数-f(可选参数)表示当遇到错误时，可以skip过去，继续执行下面的语句</span><br></pre></td></tr></table></figure></p><p>但是自从上次备份后添加或者修改的数据会丢失，怎么办？只能用big-log来恢复</p><p>先查看最后生成的big-log日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysqlbinlog --no-defaults mysql-bin.000005 | more</span></span><br></pre></td></tr></table></figure></p><p>截图如下：</p><p>找到对应的sql语句对应的end_log_post id<br>开始用big-log来恢复备份后添加或者修改的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]<span class="comment"># /usr/local/mysql/bin/mysqlbinlog --no-defaults --stop-position='666' mysql-bin.000005 | /usr/local/mysql/bin/mysql -uroot -p123456 test</span></span><br></pre></td></tr></table></figure></p><p>mysqlbinlog可选参数说明：<br>–start-position=’20’<br>–stop-position=’111’<br>–start-date=’2017-01-18 00:00:00’<br>–stop-date=’2017-01-18 23:59:59’</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql主从复制和慢查询日志说明&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql-分区技术</title>
    <link href="https://vonfly.github.io/2017/03/16/mysql-partition/"/>
    <id>https://vonfly.github.io/2017/03/16/mysql-partition/</id>
    <published>2017-03-16T01:20:40.000Z</published>
    <updated>2018-08-22T11:54:19.389Z</updated>
    
    <content type="html"><![CDATA[<p>mysql-分区技术<br><a id="more"></a></p><h2 id="MYSQL分区技术"><a href="#MYSQL分区技术" class="headerlink" title="MYSQL分区技术"></a>MYSQL分区技术</h2><p>MYSQL的分区技术与水平分表有点类似，但是它是在逻辑层进行的水平分表，对于应用程序而言它还是一张表。<br>MYSQL5.1有5种分区类型：<br>RANGE分区：基于属于一个给定连续区间的列值，把多行分配给分区<br>LIST分区：类似于RANGE分区，区别在于LIST分区是基于列值分配一个离散集合中的某个值来进行选择<br>HASH分区：。。。<br>KEY分区：。。。</p><p>例子1：假定你创建了一个如下的表，该表保存有20家音像店的职员记录，这20家音像店的编号从1到20.如果你想将其分成4个小分区，那么你可以采用RANGE分区，创建的数据库表如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE employees(</span><br><span class="line">id INT NOT NULL,</span><br><span class="line">fname VARCHAR(30),</span><br><span class="line">iname VARCHAR(30),</span><br><span class="line">hired DATE NOT NULL DEFAULT &apos;1970-01-01&apos;,</span><br><span class="line">separated DATE NOT NULL DEFAULT &apos;9999-12-31&apos;,</span><br><span class="line">job_code INT NOT NULL,</span><br><span class="line">store_id INT NOT NULL</span><br><span class="line">)engine=myisam default charset=utf8</span><br><span class="line">PARTITION BY RANGE(store_id)(</span><br><span class="line">PARTITION p0 VALUES LESS THAN(6),</span><br><span class="line">PARTITION p1 VALUES LESS THAN(11),</span><br><span class="line">PARTITION p2 VALUES LESS THAN(16),</span><br><span class="line">PARTITION p3 VALUES LESS THAN(21)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>例子2：假定你创建了一个如下的表，该表保存有20家音像店的职员记录，这20家音像店的编号从1到20。如果你想把不同时期离职的员工进行分别存储，那么你可以将日期字段separated(即离职时间)作为一个key，创建的数据库表如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE employees1(</span><br><span class="line">id INT NOT NULL,</span><br><span class="line">fname VARCHAR(30),</span><br><span class="line">iname VARCHAR(30),</span><br><span class="line">hired DATE NOT NULL DEFAULT &apos;1970-01-01&apos;,</span><br><span class="line">separated DATE NOT NULL DEFAULT &apos;9999-12-31&apos;,</span><br><span class="line">job_code INT NOT NULL,</span><br><span class="line">store_id INT NOT NULL</span><br><span class="line">)</span><br><span class="line">PARTITION BY RANGE(YEAR(separated))(</span><br><span class="line">PARTITION p0 VALUES LESS THAN(1991),</span><br><span class="line">PARTITION p1 VALUES LESS THAN(1996),</span><br><span class="line">PARTITION p2 VALUES LESS THAN(2001),</span><br><span class="line">PARTITION p3 VALUES LESS THAN MAXVALUE</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>说明：YEAR()是mysql的一个日期函数，将日期类型的字段转换为整数类型，从而就可以作为RANGE分区的key。</p><h3 id="条件-range、list-分区算法管理"><a href="#条件-range、list-分区算法管理" class="headerlink" title="条件(range、list)分区算法管理"></a>条件(range、list)分区算法管理</h3><p>增加分区：<br>    alter table 表名 add partition(<br>        partition 分区名  values less than[in] (常量[列表]),<br>        partition 分区名  values less than[in] (常量[列表]),<br>        ….<br>    )<br>减少分区：<br>    alter table 表名 drop  partition 分区名称;<br>    减少分区，会丢失对应分区的数据。</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table employees1 add partition(</span><br><span class="line">partition p4 values less than (2008),</span><br><span class="line">partition p4 values less than (2009)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="innodb表数据结构"><a href="#innodb表数据结构" class="headerlink" title="innodb表数据结构"></a>innodb表数据结构</h3><p>对于innodb表的数据结构，首先要解决两个概念性的问题：共享表空间以及独占表空间。<br>共享表空间以及独占表空间都是针对数据的存储方式而言的。<br>共享表空间：某一个数据库的所有的表数据、索引文件全部放在一个文件中，默认这个共享表空间的文件路径在data目录下，默认的文件名为：ibdata1，初始化大小为10M。<br>独立表空间：每一个表都将会生成以独立的文件方式来进行存储，每一个表都有一个。frm表描述文件，还有一个.ibd文件。其中这个文件包括了单独一个表的数据内容以及索引内容，默认情况下他的存储位置也是在表的位置之中</p><h4 id="查看innodb表空间设置"><a href="#查看innodb表空间设置" class="headerlink" title="查看innodb表空间设置"></a>查看innodb表空间设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//为on表示是独立表空间，off表示共享表空间</span><br><span class="line">mysql&gt; show variables like &apos;innodb_file_per_table&apos;;</span><br></pre></td></tr></table></figure><h4 id="如何修改innodb表为独立表空间"><a href="#如何修改innodb表为独立表空间" class="headerlink" title="如何修改innodb表为独立表空间"></a>如何修改innodb表为独立表空间</h4><p>配置mysql的配置文件my.cnf<br>…<br>innodb_data_home_dir=”C:\mysql\data\”    //默认存在的，只需把前面井号去掉即可<br>innodb_log_group_home_dir=”C:\mysql\data\”    //默认存在的，只需把前面井号去掉即可<br>innodb_data_file_path=ibdata1:10M:autoextend    //默认存在的，只需把前面井号去掉即可<br>innodb_file_per_table=1</p><p>参数说明：<br>这些设置表示配置一个可扩展大小的尺寸为10MB的单独文件，名为ibdata1,没有给出文件的位置，所以默认的是在mysql的数据目录内。<br>innodb_data_home_dir    //代表为数据库文件所存放的目录<br>innodb_log_group_home_dir    //为日志存放目录<br>innodb_file_per_table    //是否使用共享以及独立表空间来<br>以上的几个参数必须在一起加入</p><h4 id="把共享表空间的表转移到独立表空间"><a href="#把共享表空间的表转移到独立表空间" class="headerlink" title="把共享表空间的表转移到独立表空间"></a>把共享表空间的表转移到独立表空间</h4><p>步骤：<br>1、使用mysqldump导出所有数据库表数据<br>2、停止mysql服务，修改参数（修改为独立表空间），并删除原先innodb共享表相关文件<br>3、重启mysql服务<br>4、重新导入数据</p><p>说明：<br>1、只有把innodb设置成独立表空间后，才能创建成功innodb表引擎的表分区<br>2、mysql5.6之后版本默认配置是独立表空间</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mysql-分区技术&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql-SQL语句技巧和优化</title>
    <link href="https://vonfly.github.io/2017/03/13/mysql-optimize/"/>
    <id>https://vonfly.github.io/2017/03/13/mysql-optimize/</id>
    <published>2017-03-13T01:16:46.000Z</published>
    <updated>2018-08-22T11:54:19.389Z</updated>
    
    <content type="html"><![CDATA[<p>SQL语句技巧和优化<br><a id="more"></a></p><h2 id="mysql-SQL语句技巧和优化"><a href="#mysql-SQL语句技巧和优化" class="headerlink" title="mysql SQL语句技巧和优化"></a>mysql SQL语句技巧和优化</h2><p>mysql5.5及之后版本默认存储引擎是innodb</p><h3 id="巧用RAND-提取随机行"><a href="#巧用RAND-提取随机行" class="headerlink" title="巧用RAND()提取随机行"></a>巧用RAND()提取随机行</h3><p>rand()是获取一个0-1之间的随机数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from st_vonfly order by rand();</span><br></pre></td></tr></table></figure></p><p>随机抽取3条数据样本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from st_vonfly order by rand() limit 3;</span><br></pre></td></tr></table></figure></p><h3 id="优化group-by语句"><a href="#优化group-by语句" class="headerlink" title="优化group by语句"></a>优化group by语句</h3><p>有的sql语句在执行的时候，本身默认会有排序效果<br>但是有的时候我们的业务不需要排序效果，就可以进行强制限制，进而“节省默认排序”的资源。</p><p>如果查询包含group by但用户想要避免排序结果的损耗，则可以使用order by null来禁止排序：</p><h3 id="优化嵌套查询"><a href="#优化嵌套查询" class="headerlink" title="优化嵌套查询"></a>优化嵌套查询</h3><p>表1如图：<br>CREATE TABLE <code>tp_user</code> (<br>  <code>id</code> int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  <code>name</code> varchar(16) NOT NULL,<br>  <code>parents_id</code> int(10) NOT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=MyISAM DEFAULT CHARSET=utf8<br>表2如图：<br>CREATE TABLE <code>tp_parents</code> (<br>  <code>id</code> int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  <code>parent_name</code> varchar(16) NOT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE=MyISAM DEFAULT CHARSET=utf8</p><p>下面是采用嵌套查询的效果（可以使用更有效的连接查询(JOIN)替代）</p><p>mysql&gt; desc select <em> from tp_parents where id in(select parents_id from tp_user)<br>\G<br><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></em> 1. row <strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong><br>           id: 1<br>  select_type: PRIMARY<br>        table: tp_parents<br>         type: ALL<br>possible_keys: NULL<br>          key: NULL<br>      key_len: NULL<br>          ref: NULL<br>         rows: 3<br>        Extra: Using where<br><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong> 2. row <strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong><br>           id: 2<br>  select_type: DEPENDENT SUBQUERY<br>        table: tp_user<br>         type: ALL<br>possible_keys: NULL<br>          key: NULL<br>      key_len: NULL<br>          ref: NULL<br>         rows: 4<br>        Extra: Using where<br>2 rows in set (0.06 sec)</p><h4 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h4><p>优化表的类型<br>通过拆分提高表的访问效率<br>使用中间表提高统计查询速度</p><h4 id="MYSQL服务器优化"><a href="#MYSQL服务器优化" class="headerlink" title="MYSQL服务器优化"></a>MYSQL服务器优化</h4><h5 id="四种字符集问题-统一设置为utf8"><a href="#四种字符集问题-统一设置为utf8" class="headerlink" title="四种字符集问题(统一设置为utf8)"></a>四种字符集问题(统一设置为utf8)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; \s</span><br></pre></td></tr></table></figure><p>如何设置？<br>vim /etc/my.cnf<br>[client]</p><p>#password=your_password<br>port=3306<br>socket=/tmp/mysql.sock<br>default-character-set=utf8    //控制的是客户端字符集和连接字符集</p><p>[mysqld]<br>…….<br>myisam_sort_buffer_size=8M<br>character-set-server=utf8    //控制服务器字符集和数据库字符集<br>collation-server=utf8_general_ci    //校验字符集，主要针对的排序</p><p>查看中文字符集以及对应的校验字符集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show character set;</span><br></pre></td></tr></table></figure></p><p>如图所示：</p><h5 id="bin-log日志问题"><a href="#bin-log日志问题" class="headerlink" title="bin log日志问题"></a>bin log日志问题</h5><h5 id="slow-log慢查询日志问题"><a href="#slow-log慢查询日志问题" class="headerlink" title="slow log慢查询日志问题"></a>slow log慢查询日志问题</h5><p>可以查看是否开启慢查询日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%slow%&quot;;</span><br></pre></td></tr></table></figure></p><p>设置的慢查询时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%long%&quot;;</span><br></pre></td></tr></table></figure></p><p>开启慢查询日志和设置慢查询时间：<br>vim /etc/my.cnf<br>[mysqld]<br>…….<br>log_slow_queries=slow.log<br>long_query_time=5</p><h5 id="socket问题"><a href="#socket问题" class="headerlink" title="socket问题"></a>socket问题</h5><p>mysql socket无法登录<br>1.有时登录mysql时提示不能用socket登录，此时可以换成tcp方式去登录，但是只有测试时可以这样用，必须要在php去用之前把这个事情解决了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mysql -uroot -p123456 --protocol tcp -hlocalhost</span><br></pre></td></tr></table></figure><p>这样就可以登录，就不用mysql.socket来登录。<br>把mysql重新启动就会自动生成socket文件</p><h5 id="root密码丢失"><a href="#root密码丢失" class="headerlink" title="root密码丢失"></a>root密码丢失</h5><p>root密码丢失破解步骤<br>1.service mysqld stop    //把mysql关闭<br>2.mysqld_safe –skip-grant-tables –user=mysql &amp;    //跳过授权表mysql.user和mysql.db来重启mysql<br>3.mysql -uroot;    //登录进mysql<br>4.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update mysql.user set password=password(&quot;123456&quot;) where user=&quot;root&quot; and host=&quot;localhost&quot;;</span><br></pre></td></tr></table></figure></p><h3 id="SQL语句的优化步骤"><a href="#SQL语句的优化步骤" class="headerlink" title="SQL语句的优化步骤"></a>SQL语句的优化步骤</h3><p>一、通过慢查询日志查看效率低的sql语句<br>二、通过explain或者desc解析sql语句(查看是否需要做索引)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from table where id = 8\G</span><br><span class="line">desc select * from table where id = 8\G</span><br></pre></td></tr></table></figure></p><p>每一列的简单解释<br>id:1<br>select_type:SIMPLE    //表示select的类型，常见的取值有SIMPLE(简单表，即不使用表连接或者子查询)、PRIMARY(主查询，即外层的查询)、UNION(UNION中的第二个或者后面的查询语句)、SUBQUERY(子查询中的第一个SELECT)等<br>table:stu    //输出结果集的表<br>type:range    //表示表的连接类型，性能由好到查：system(表仅一行)、const(只一行匹配)、eq_ref(对于前面的每一行使用主键和唯一)、ref(同eq_ref，但没有使用主键和唯一索引)、ref_or_null(同前面，对null查询)、index_merge(索引合并优化)、unique_subquery(主键子查询)、index_subquery(非主键子查询)、range(表单中的范围查询)、index(都通过查询索引来得到数据)、all(通过全表扫描得到的数据)<br>possible_keys:name,ind_stu_name    //表查询时可能使用的索引<br>key:name    //表示实际使用的索引<br>key_len:50    //索引字段的长度<br>ref:NULL<br>rows:8    //扫描行的数量<br>Extra:Using where;Using index    //执行情况的说明和描述</p><p>总结：where 和 order by后边的条件字段都可以适当设置索引、分组字段也可以添加索引，避免产生临时表</p><h4 id="对表的优化和检测"><a href="#对表的优化和检测" class="headerlink" title="对表的优化和检测"></a>对表的优化和检测</h4><h5 id="检查一个或多个表是否有错误"><a href="#检查一个或多个表是否有错误" class="headerlink" title="检查一个或多个表是否有错误"></a>检查一个或多个表是否有错误</h5><p>语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CHECK TABLE tb1_name[,tb1_name]...[option]... option=&#123;QUICK|FAST|MEDIUM|EXTENDED|CHANGED&#125;</span><br></pre></td></tr></table></figure></p><p>例子（检查a1表是否有错误）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; check table a1;</span><br></pre></td></tr></table></figure></p><h5 id="对损坏或错误的表进行修复"><a href="#对损坏或错误的表进行修复" class="headerlink" title="对损坏或错误的表进行修复"></a>对损坏或错误的表进行修复</h5><p>语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; repair TABLE tb1_name[,tb1_name]...[option]...</span><br></pre></td></tr></table></figure></p><p>例子（修复a1表）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; repair table a1;</span><br></pre></td></tr></table></figure></p><h5 id="定期优化表（找访问较少的时间进行优化，防止影响业务）"><a href="#定期优化表（找访问较少的时间进行优化，防止影响业务）" class="headerlink" title="定期优化表（找访问较少的时间进行优化，防止影响业务）"></a>定期优化表（找访问较少的时间进行优化，防止影响业务）</h5><p>如果已经删除了表的一大部分，或者如果已经对含有可变长度行的表进行了很多的改动，则需要做定期优化。这个命令(optimize)可以将表中的空间碎片进行合并，但是此命令只对myisam、BDB和innobd表起作用。</p><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; OPTIMIZE [LOCAL|NO_WRITE_TO_BINLOG] TABLE tb1_name [,tb1_name]</span><br></pre></td></tr></table></figure></p><p>例子(对a1表进行优化)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; optimize table a1;</span><br></pre></td></tr></table></figure></p><h5 id="字段类型选择"><a href="#字段类型选择" class="headerlink" title="字段类型选择"></a>字段类型选择</h5><p>原则：当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或者二进制类型，最后是字符类型。对于相同级别的数据类型，应该优先选择占用空间小的数据类型。</p><h6 id="信息最好存储为整型的-mysql运行速度快，运算速度快"><a href="#信息最好存储为整型的-mysql运行速度快，运算速度快" class="headerlink" title="信息最好存储为整型的(mysql运行速度快，运算速度快)"></a>信息最好存储为整型的(mysql运行速度快，运算速度快)</h6><p>时间信息可以存储为整型的(时间戳)，用int类型<br>select from_unixstamp(时间戳)  from 表名</p><p>set集合类型 多选：set(‘篮球’,’足球’,’棒球’,’乒乓球’);<br>enum枚举类型 单选： enum(‘男’,’女’,’保密’);<br>推荐使用set和enum类型，内部会通过整型信息参数具体计算、运行。</p><p>ip地址也可以变为整型信息进行存储(mysql内部有算法，把ip变为数字)：<br>mysql： inet_aton(ip)   inet_ntoa(数字)<br>php:      ip2long(ip)       long2ip(数字)</p><h6 id="尽量少的占据存储空间"><a href="#尽量少的占据存储空间" class="headerlink" title="尽量少的占据存储空间"></a>尽量少的占据存储空间</h6><p>tinyint : 0~255                1字节<br>smallint : 0~ 65535            2字节<br>mediumint : 0~1千6百多万    3字节<br>int : 0~40多亿                4字节</p><h6 id="数据的整合最好固定长度"><a href="#数据的整合最好固定长度" class="headerlink" title="数据的整合最好固定长度"></a>数据的整合最好固定长度</h6><p>char    :0~255个字符<br>varchar : 0~65535 字节 看表编码，如果是utf8存2万多汉字 gbk存3万多汉字</p><p>char(长度)<br>固定长度，运行速度快<br>长度：255字符限制<br>varchar(长度)<br>长度不固定，内容比较少要进行部位操作，该类型要保留1-2个字节保存当前数据的长度<br>长度：65535字节限制<br>     存储汉字，例如字符集utf8的(每个汉字占据3个字节)，最多可以存储65535/3-2字节<br>                例如字符集gbk的(每个汉字占据2个字节)，最多可以存储65535/2-2字节</p><p>如存储手机号码：char(11) ，可以选取固定长度的 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL语句技巧和优化&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql简单操作</title>
    <link href="https://vonfly.github.io/2017/03/08/mysql-commands/"/>
    <id>https://vonfly.github.io/2017/03/08/mysql-commands/</id>
    <published>2017-03-08T04:53:03.000Z</published>
    <updated>2018-08-22T11:54:19.387Z</updated>
    
    <content type="html"><![CDATA[<p>常用的一些mysql操作（mysql高性能优化、mysql深入浅出）<br><a id="more"></a></p><h4 id="mysql具体语法帮助"><a href="#mysql具体语法帮助" class="headerlink" title="mysql具体语法帮助"></a>mysql具体语法帮助</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ? contents //查看所有帮助大纲，然后通过帮助大纲再用?继续往下查询具体语法</span><br><span class="line">mysql&gt; ? index  //查看索引具体操作帮助信息</span><br><span class="line">mysql&gt; ? view //查看视图具体操作帮助信息</span><br><span class="line">mysql&gt; ? create view //创建视图具体操作帮助信息</span><br><span class="line"></span><br><span class="line">mysql&gt; ? reg%//如果记不住全称，可以使用%来代替</span><br></pre></td></tr></table></figure><h4 id="结果进行行列颠倒（-G）"><a href="#结果进行行列颠倒（-G）" class="headerlink" title="结果进行行列颠倒（\G）"></a>结果进行行列颠倒（\G）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show plugins;</span><br><span class="line">mysql&gt; show plugins\G</span><br></pre></td></tr></table></figure><h4 id="mysql表复制（包括复制表结构和表数据）"><a href="#mysql表复制（包括复制表结构和表数据）" class="headerlink" title="mysql表复制（包括复制表结构和表数据）"></a>mysql表复制（包括复制表结构和表数据）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table vf_a2 like vf_a1;//先复制表结构</span><br><span class="line">mysql&gt; insert into vf_a2 select * from vf_a1;//复制表数据。说明：表vf_a1和表vf_a2字段完全一样的前提下用*，否则要复制某些字段要具体写字段</span><br></pre></td></tr></table></figure><h4 id="表名修改"><a href="#表名修改" class="headerlink" title="表名修改"></a>表名修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//把表名为t2修改为t1</span><br><span class="line">mysql&gt; rename table t2 to t1;</span><br></pre></td></tr></table></figure><h4 id="添加、修改字段"><a href="#添加、修改字段" class="headerlink" title="添加、修改字段"></a>添加、修改字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//添加字段username</span><br><span class="line">mysql&gt; alter table vf_a1 add username varchar(32) not null default &apos;&apos; comment &apos;用户名&apos;;</span><br><span class="line"></span><br><span class="line">//修改字段</span><br><span class="line">mysql&gt; alter table vf_a1 modify username varchar(20) not null default &apos;&apos; comment &apos;用户名&apos;;</span><br><span class="line">//修改字段</span><br><span class="line">mysql&gt; alter table vf_a1 change username varchar(20) not null default &apos;&apos; comment &apos;用户名&apos;;</span><br><span class="line"></span><br><span class="line">//删除username字段</span><br><span class="line">mysql&gt; alter table vf_a1 drop username;</span><br></pre></td></tr></table></figure><h4 id="索引的创建、删除、查看"><a href="#索引的创建、删除、查看" class="headerlink" title="索引的创建、删除、查看"></a>索引的创建、删除、查看</h4><h5 id="方法一：-create-index（创建索引）、drop-index（删除索引）"><a href="#方法一：-create-index（创建索引）、drop-index（删除索引）" class="headerlink" title="方法一： create index（创建索引）、drop index（删除索引）"></a>方法一： create index（创建索引）、drop index（删除索引）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create index in_name on vf_a1(name);//为表vf_a1的name字段创建普通索引</span><br><span class="line"></span><br><span class="line">mysql&gt; create unique index un_name on vf_a1(name);//为表vf_a1的name字段创建唯一索引</span><br><span class="line"></span><br><span class="line">mysql&gt; drop index in_name on vf_a1;//删除表vf_a1名称为in_name的索引</span><br></pre></td></tr></table></figure><h5 id="方法二（常用以及全面的方法，可以创建普通索引、唯一-unique-索引和主键-primary-key-索引）："><a href="#方法二（常用以及全面的方法，可以创建普通索引、唯一-unique-索引和主键-primary-key-索引）：" class="headerlink" title="方法二（常用以及全面的方法，可以创建普通索引、唯一(unique)索引和主键(primary key)索引）："></a>方法二（常用以及全面的方法，可以创建普通索引、唯一(unique)索引和主键(primary key)索引）：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table vf_a1 add index in_name(name);//为表vf_a1的name字段创建普通索引</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table vf_a1 add unique in_name(name);//为表vf_a1的name字段创建唯一索引</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table vf_a1 drop index in_name;//删除表vf_a1名称为in_name的索引</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//删除主键索引（先删除主键字段的自增，然后再删除主键索引）</span><br><span class="line">mysql&gt; id int unsigned not null auto_increment//原来字段</span><br><span class="line">mysql&gt; alter table vf_a1 modify id int unsigned not null;//修改字段（不写auto_increment就是把auto_increment(自增)删除了）</span><br><span class="line">mysql&gt; alter table vf_a1 drop primary key;//再删除主键索引</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//增加主键索引(先添加主键索引，再修改主键字段为自增)</span><br><span class="line">mysql&gt; alter table vf_a1 add primary key(id);</span><br><span class="line">mysql&gt; id int unsigned not null;//原来字段</span><br><span class="line">mysql&gt; alter table vf_a1 modify id int unsigned not null auto_increment;//修改主键字段为自增</span><br></pre></td></tr></table></figure><h5 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show index from vf_a1;//查看表vf_a1下的索引</span><br></pre></td></tr></table></figure><h4 id="mysql视图（中间表，把满足条件的记录生成一张中间表，就可以直接对这张表进行增删改查，提高性能）"><a href="#mysql视图（中间表，把满足条件的记录生成一张中间表，就可以直接对这张表进行增删改查，提高性能）" class="headerlink" title="mysql视图（中间表，把满足条件的记录生成一张中间表，就可以直接对这张表进行增删改查，提高性能）"></a>mysql视图（中间表，把满足条件的记录生成一张中间表，就可以直接对这张表进行增删改查，提高性能）</h4><h5 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create view v_a1 as select * from a1 where id&gt;8;</span><br></pre></td></tr></table></figure><h5 id="查看视图（即查看表）"><a href="#查看视图（即查看表）" class="headerlink" title="查看视图（即查看表）"></a>查看视图（即查看表）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br></pre></td></tr></table></figure><h5 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop view v_a1;//删除名称为v_a1的视图</span><br></pre></td></tr></table></figure><h4 id="mysql存储"><a href="#mysql存储" class="headerlink" title="mysql存储"></a>mysql存储</h4><p>需求：向表a1（有主键id和name两个字段）插入一百条数据，字段name的值依次为user1、user2、user3…..user100</p><p>先修改定界符，因为mysql存储很多语句都是以分号结束的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; \d ////把语句定界符分号修改为//</span><br></pre></td></tr></table></figure></p><p>再创建存储<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create procedure p1()</span><br><span class="line">-&gt; begin</span><br><span class="line">-&gt; set @i=1;</span><br><span class="line">-&gt; while @i&lt;=100 do</span><br><span class="line">-&gt; insert into a1(name) values(concat(&quot;user&quot;, @i));</span><br><span class="line">-&gt; set @i=@i+1;</span><br><span class="line">-&gt; end while;</span><br><span class="line">-&gt; end//</span><br></pre></td></tr></table></figure></p><p>最后执行刚刚创建的存储p1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; call p1;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from a1;//查看数据是否创建成功</span><br></pre></td></tr></table></figure></p><h5 id="查看mysql存储"><a href="#查看mysql存储" class="headerlink" title="查看mysql存储"></a>查看mysql存储</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show procedure status;//查看存储状态</span><br><span class="line"></span><br><span class="line">mysql&gt; show create procedure p1;//查看存储p1的具体信息</span><br></pre></td></tr></table></figure><h5 id="mysql事务处理-innodb表引擎才支持"><a href="#mysql事务处理-innodb表引擎才支持" class="headerlink" title="mysql事务处理(innodb表引擎才支持)"></a>mysql事务处理(innodb表引擎才支持)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//关闭自动提交功能</span><br><span class="line">mysql&gt; set autocommit=0;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//从表a1中删除了一条记录</span><br><span class="line">mysql&gt; delete from a1 where id=11;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//此时做一个p1还原点</span><br><span class="line">mysql&gt; savepoint p1;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//再次从表a1中删除了一条记录</span><br><span class="line">mysql&gt; delete from a1 where id=12;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//再次做一个p2还原点</span><br><span class="line">mysql&gt; savepoint p2;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//此时恢复到p1还原点，当然后面的p2这些还原点自动会失效</span><br><span class="line">mysql&gt; rollback to p1;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//如果退回到最原始的还原点</span><br><span class="line">mysql&gt; rollback;</span><br></pre></td></tr></table></figure><h5 id="清空表-清空内容以及auto-increment恢复成1开始"><a href="#清空表-清空内容以及auto-increment恢复成1开始" class="headerlink" title="清空表(清空内容以及auto_increment恢复成1开始)"></a>清空表(清空内容以及auto_increment恢复成1开始)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; truncate table tablename;</span><br></pre></td></tr></table></figure><h5 id="mysql变量使用（需要查些资料多学习下-如mysql手册）"><a href="#mysql变量使用（需要查些资料多学习下-如mysql手册）" class="headerlink" title="mysql变量使用（需要查些资料多学习下,如mysql手册）"></a>mysql变量使用（需要查些资料多学习下,如mysql手册）</h5><p>1、需求：查询排名<br>create table vo_students(<br>    id int unsigned not null auto_increment,<br>    name varchar(30) not null default ‘’ comment ‘名字’,<br>    score smallint not null default 0 comment ‘分数’,<br>    primary key (id)<br>)engine myisam default charset utf8;<br>insert into vo_students(name, score) values (‘zhang’, 100),(‘li’, 89),(‘sun’, 57),(‘zhao’, 100),(‘zhou’, 89),(‘qian’, 92);</p><p>具体方法：<br>set @pres:=0,@currs:=0,@rank:=0;<br>select name,(@currs:=score) as score, @rank:=if(@currs&lt;&gt;@pres,@rank:=@rank+1,@rank) as rank,@pres:=score as prev from vo_students order by score desc;</p><p>mysql内置函数——————————————————————-</p><p>字符串函数：</p><p>CONCAT(string2 [,….])     //连接字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(&quot;hello &quot;, &quot;world&quot;);</span><br></pre></td></tr></table></figure></p><p>LCASE(sting2)     //转换成小写<br>UCASE(sting2)     //转换成大写</p><p>LENGTH(string2)     //string2的长度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select length(&quot;vonfly&quot;);</span><br></pre></td></tr></table></figure></p><p>LTRIM(string2)     //去除左边空格<br>RTRIM(string2)     //去除右边空格</p><p>REPEAT(string2,count)     //重复count次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select repeat(&quot;vonfly&quot;, 6);</span><br></pre></td></tr></table></figure></p><p>REPLACE(string2, search_str, replace_str)     //在string2中用replace_str替换search_str<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select replace(&quot;vonfly is my web&quot;, &quot;my&quot;, &quot;your&quot;);</span><br></pre></td></tr></table></figure></p><p>SUBSTR(string2, position [,length])     //从string2的position开始，取length个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select substr(&quot;vonfly is my web&quot;, 1, 5);</span><br></pre></td></tr></table></figure></p><p>SPACE(count) //生成count个空格</p><p>日期函数<br>CURDATE()     //返回当前日期<br>CURTIME()     //返回当前时间<br>NOW()         //返回当前的日期时间<br>UNLX_TIMESTAMP(date)     //返回当前date的UNIX时间戳<br>FROM_UNIXTIME()     //返回UNLX时间戳的日期值<br>YEAR(date)     //返回日期date的年份<br>DATEDIFF(expr1,expr2)     //返回起始时间expr1和结束时间expr2的天数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的一些mysql操作（mysql高性能优化、mysql深入浅出）&lt;br&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>一些PHP方法</title>
    <link href="https://vonfly.github.io/2017/02/28/php-knowledge1/"/>
    <id>https://vonfly.github.io/2017/02/28/php-knowledge1/</id>
    <published>2017-02-28T11:43:20.000Z</published>
    <updated>2018-08-22T11:54:19.390Z</updated>
    
    <content type="html"><![CDATA[<p>主要用于自己学习(●’◡’●)</p><a id="more"></a><h4 id="用最少的代码写一个求3值最大值的函数"><a href="#用最少的代码写一个求3值最大值的函数" class="headerlink" title="用最少的代码写一个求3值最大值的函数"></a>用最少的代码写一个求3值最大值的函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">($a,$b,$c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> $a &gt; $b ? ($a &gt; $c ? $a : $c) : ($b &gt; $c ? $b : $c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用PHP打印出前一天的时间，打印格式是2007年5月10日22-21-21"><a href="#用PHP打印出前一天的时间，打印格式是2007年5月10日22-21-21" class="headerlink" title="用PHP打印出前一天的时间，打印格式是2007年5月10日22:21:21"></a>用PHP打印出前一天的时间，打印格式是2007年5月10日22:21:21</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>, strtotime(<span class="string">'-1 day'</span>));</span><br></pre></td></tr></table></figure><h4 id="输出正在浏览当前页面用户的IP地址"><a href="#输出正在浏览当前页面用户的IP地址" class="headerlink" title="输出正在浏览当前页面用户的IP地址"></a>输出正在浏览当前页面用户的IP地址</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</span><br></pre></td></tr></table></figure><h4 id="查询（query）的字符串URL中第一个问号-之后的内容（比如http-localhost-text-php-id-1-amp-bi-2，查询出-id-1-amp-bi-2-）"><a href="#查询（query）的字符串URL中第一个问号-之后的内容（比如http-localhost-text-php-id-1-amp-bi-2，查询出-id-1-amp-bi-2-）" class="headerlink" title="查询（query）的字符串URL中第一个问号 ? 之后的内容（比如http://localhost/text.php?id=1&amp;bi=2，查询出 id=1&amp;bi=2 ）"></a>查询（query）的字符串URL中第一个问号 ? 之后的内容（比如<a href="http://localhost/text.php?id=1&amp;bi=2，查询出" target="_blank" rel="noopener">http://localhost/text.php?id=1&amp;bi=2，查询出</a> id=1&amp;bi=2 ）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"QUERY_STRING"</span>];</span><br></pre></td></tr></table></figure><h4 id="当前运行脚本所在的文档根目录"><a href="#当前运行脚本所在的文档根目录" class="headerlink" title="当前运行脚本所在的文档根目录"></a>当前运行脚本所在的文档根目录</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"DOCUMENT_ROOT"</span>];</span><br></pre></td></tr></table></figure><h4 id="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹"><a href="#写一个函数，能够遍历一个文件夹下的所有文件和子文件夹" class="headerlink" title="写一个函数，能够遍历一个文件夹下的所有文件和子文件夹"></a>写一个函数，能够遍历一个文件夹下的所有文件和子文件夹</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_scandir</span><span class="params">($dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$files=<span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">if</span>(is_dir($dir))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>($handle=opendir($dir))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(($file=readdir($handle))!==<span class="keyword">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>($file!=<span class="string">"."</span> &amp;&amp; $file!=<span class="string">".."</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(is_dir($dir.<span class="string">"/"</span>.$file))</span><br><span class="line">&#123;</span><br><span class="line">$files[$file]=my_scandir($dir.<span class="string">"/"</span>.$file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$files[]=$dir.<span class="string">"/"</span>.$file;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">closedir($handle);</span><br><span class="line"><span class="keyword">return</span> $files;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(my_scandir(<span class="string">"F:ali"</span>));</span><br></pre></td></tr></table></figure><h4 id="请用正则表达式（Regular-Expression）验证电子邮件的格式是否正确。"><a href="#请用正则表达式（Regular-Expression）验证电子邮件的格式是否正确。" class="headerlink" title="请用正则表达式（Regular Expression）验证电子邮件的格式是否正确。"></a>请用正则表达式（Regular Expression）验证电子邮件的格式是否正确。</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$email = <span class="string">'1185236@163.com'</span>;</span><br><span class="line"><span class="keyword">if</span>( !preg_match(<span class="string">'/^[\w.]+@([\w.]+)\.[a-z]&#123;2,6&#125;$/i'</span>, $email) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"电子邮件格式不正确！"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"电子邮件格式正确！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写出匹配URL的正则表达式"><a href="#写出匹配URL的正则表达式" class="headerlink" title="写出匹配URL的正则表达式."></a>写出匹配URL的正则表达式.</h4><p>/^http:\/\/www.([\w]+).([\w]+)$/</p><h4 id="用PHP写出显示客户端IP与服务器IP的代码"><a href="#用PHP写出显示客户端IP与服务器IP的代码" class="headerlink" title="用PHP写出显示客户端IP与服务器IP的代码"></a>用PHP写出显示客户端IP与服务器IP的代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $_SERVER[<span class="string">"REMOTE_ADDR"</span>];<span class="comment">//客户端IP</span></span><br><span class="line"><span class="keyword">echo</span> gethostbyname(<span class="string">"www.baidu.com"</span>);<span class="comment">//服务器IP</span></span><br></pre></td></tr></table></figure><h4 id="如何修改SESSION的生存时间"><a href="#如何修改SESSION的生存时间" class="headerlink" title="如何修改SESSION的生存时间"></a>如何修改SESSION的生存时间</h4><p>方法1：将php.ini中的session.gc_maxlifetime设置为9999重启apache</p><p>方法2：在当前项目中修改<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$expire = <span class="number">3600</span> * <span class="number">3</span>;</span><br><span class="line">ini_set(<span class="string">'session.gc_maxlifetime'</span>, $expire);</span><br><span class="line">ini_set(<span class="string">'session.cookie_lifetime'</span>, $expire);</span><br></pre></td></tr></table></figure></p><h4 id="有一个网页地址-比如百度主页-http-www-baidu-com-如何得到它的内容"><a href="#有一个网页地址-比如百度主页-http-www-baidu-com-如何得到它的内容" class="headerlink" title="有一个网页地址, 比如百度主页: http://www.baidu.com/,如何得到它的内容?"></a>有一个网页地址, 比如百度主页: <a href="http://www.baidu.com/,如何得到它的内容" target="_blank" rel="noopener">http://www.baidu.com/,如何得到它的内容</a>?</h4><p>方法1：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$readcontents = fopen(<span class="string">"http://www.baidu.com/"</span>, <span class="string">"rb"</span>);</span><br><span class="line">$contents = stream_get_contents($readcontents);</span><br><span class="line">fclose($readcontents);</span><br><span class="line"><span class="keyword">echo</span> $contents;</span><br></pre></td></tr></table></figure></p><p>方法2：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$readcontents = file_get_contents(<span class="string">"http://www.baidu.com/"</span>);</span><br><span class="line"><span class="keyword">echo</span> $readcontents;</span><br></pre></td></tr></table></figure></p><h4 id="写一个函数，尽可能高效的，从一个标准-url-里取出文件的扩展名"><a href="#写一个函数，尽可能高效的，从一个标准-url-里取出文件的扩展名" class="headerlink" title="写一个函数，尽可能高效的，从一个标准 url 里取出文件的扩展名"></a>写一个函数，尽可能高效的，从一个标准 url 里取出文件的扩展名</h4><p>例如: <a href="http://www.sina.com.cn/abc/de/fg.php?id=1" target="_blank" rel="noopener">http://www.sina.com.cn/abc/de/fg.php?id=1</a> 需要取出 php 或 .php<br>方法1：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">$arr = parse_url($url);</span><br><span class="line">$file = basename($arr[<span class="string">'path'</span>]);</span><br><span class="line">$ext = explode(<span class="string">"."</span>, $file);</span><br><span class="line"><span class="keyword">return</span> $ext[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> getExt(<span class="string">'http://www.sina.com.cn/abc/de/fg.php?id=1'</span>);</span><br></pre></td></tr></table></figure></p><p>方法2：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExt</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">$url = basename($url);</span><br><span class="line">$pos1 = strpos($url, <span class="string">"."</span>);</span><br><span class="line">$pos2 = strpos($url, <span class="string">"?"</span>);</span><br><span class="line">$length = $pos2 - $pos1 - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(strstr($url, <span class="string">"?"</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> substr($url, $pos1 + <span class="number">1</span>, $length);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> substr($url, $pos1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> getExt(<span class="string">'http://www.sina.com.cn/abc/de/fg.php?id=1'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="使用五种以上方式获取一个文件的扩展名"><a href="#使用五种以上方式获取一个文件的扩展名" class="headerlink" title="使用五种以上方式获取一个文件的扩展名"></a>使用五种以上方式获取一个文件的扩展名</h4><p>要求：dir/upload.image.jpg，找出 .jpg 或者 jpg ，<br>必须使用PHP自带的处理函数进行处理，方法不能明显重复，可以封装成函数，比如 get_ext1($file_name), get_ext2($file_name)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$file_name = <span class="string">'dir/upload.image.jpg'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext1</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> get_ext1($file_name);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$file_name = <span class="string">'dir/upload.image.jpg'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext2</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> substr( $file_name, strrpos($file_name, <span class="string">'.'</span>) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> get_ext2($file_name);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext3</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line">$stack = explode(<span class="string">'.'</span>, $file_name);</span><br><span class="line">$fruit = array_pop($stack);</span><br><span class="line"><span class="keyword">return</span> $fruit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> get_ext3($file_name);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext4</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line">$p = pathinfo($file_name);</span><br><span class="line"><span class="keyword">return</span> $p[<span class="string">'extension'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> get_ext4($file_name);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$file_name = <span class="string">'dir/upload/image.jpg'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ext5</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> strrev(substr(strrev($file_name), <span class="number">0</span>, strpos(strrev($file_name), <span class="string">'.'</span>)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> get_ext5($file_name);</span><br></pre></td></tr></table></figure><h4 id="输出以下值"><a href="#输出以下值" class="headerlink" title="输出以下值"></a>输出以下值</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$str1 = <span class="keyword">null</span>;</span><br><span class="line">$str2 = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">echo</span> $str1==$str2 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</span><br><span class="line"><span class="comment">//输出相等</span></span><br><span class="line"></span><br><span class="line">$str3 = <span class="string">''</span>;</span><br><span class="line">$str4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> $str3==$str4 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</span><br><span class="line"><span class="comment">//输出相等</span></span><br><span class="line"></span><br><span class="line">$str5 = <span class="number">0</span>;</span><br><span class="line">$str6 = <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">echo</span> $str5===$str6 ? <span class="string">'相等'</span> : <span class="string">'不相等'</span>;</span><br><span class="line"><span class="comment">//输出不相等</span></span><br></pre></td></tr></table></figure><h4 id="求两个日期的差数，例如2007-2-5-2007-3-6-的日期差数"><a href="#求两个日期的差数，例如2007-2-5-2007-3-6-的日期差数" class="headerlink" title="求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数"></a>求两个日期的差数，例如2007-2-5 ~ 2007-3-6 的日期差数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_days</span><span class="params">($date1, $date2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$time1 = strtotime($date1);</span><br><span class="line">$time2 = strtotime($date2);</span><br><span class="line"><span class="keyword">return</span> abs($time2-$time1)/<span class="number">86400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> get_days(<span class="string">'2007-2-5'</span>, <span class="string">'2007-2-6'</span>);</span><br></pre></td></tr></table></figure><h4 id="请写一个函数，实现以下功能："><a href="#请写一个函数，实现以下功能：" class="headerlink" title="请写一个函数，实现以下功能："></a>请写一个函数，实现以下功能：</h4><p>字符串”open_door” 转换成 “OpenDoor”、”make_by_id” 转换成 “MakeById”<br>方法一：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_explode</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">$str_arr=explode(<span class="string">"_"</span>,$str);</span><br><span class="line">$str_implode=implode(<span class="string">" "</span>, $str_arr);</span><br><span class="line">$str_implode=implode(<span class="string">""</span>, explode(<span class="string">" "</span>,ucwords($str_implode)));</span><br><span class="line"><span class="keyword">return</span> $str_implode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> str_explode(<span class="string">'open_door'</span>);</span><br></pre></td></tr></table></figure></p><p>方法二：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$str = <span class="string">'open_door'</span>;</span><br><span class="line">$expStr = explode(<span class="string">"_"</span>, $str);</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($expStr); $i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> ucwords($expStr[$i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法三：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> str_replace(<span class="string">' '</span>, <span class="string">''</span>, ucwords( str_replace(<span class="string">'_'</span>, <span class="string">' '</span>, <span class="string">'open_door'</span>) ) );</span><br></pre></td></tr></table></figure></p><h4 id="echo-count-“abc”-输出什么"><a href="#echo-count-“abc”-输出什么" class="headerlink" title="echo count(“abc”); 输出什么?"></a>echo count(“abc”); 输出什么?</h4><p>答案：1<br>说明：count — 计算数组中的单元数目或对象中的属性个数<br>int count ( mixed$var [, int $mode ] ), 如果 var 不是数组类型或者实现了 Countable 接口的对象，将返回1，有一个例外，如果 var 是 NULL 则结果是 0。</p><p>对于对象，如果安装了 SPL，可以通过实现 Countable 接口来调用 count()。该接口只有一个方法 count()，此方法返回 count() 函数的返回值。</p><h4 id="有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）"><a href="#有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）" class="headerlink" title="有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）"></a>有一个一维数组，里面存储整形数据，请写一个函数，将他们按从大到小的顺序排列。要求执行效率高。并说明如何改善执行效率。（该函数必须自己实现，不能使用php函数）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BubbleSort</span><span class="params">(&amp;$arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$cnt = count($arr);</span><br><span class="line">$flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $cnt; $i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>($flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">$flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt; $cnt-$i<span class="number">-1</span>; $j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>($arr[$j] &gt; $arr[$j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">$tmp = $arr[$j];</span><br><span class="line">$arr[$j] = $arr[$j+<span class="number">1</span>];</span><br><span class="line">$arr[$j+<span class="number">1</span>] = $tmp;</span><br><span class="line">$flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$test=<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line">BubbleSort($test);</span><br><span class="line">var_dump($test);</span><br></pre></td></tr></table></figure><h4 id="写一个函数实现字符串翻转"><a href="#写一个函数实现字符串翻转" class="headerlink" title="写一个函数实现字符串翻转"></a>写一个函数实现字符串翻转</h4><p>方法一：strrev(‘abcdef’);<br>方法二：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str</span><span class="params">($a)</span></span>&#123;</span><br><span class="line">$len = strlen($a);</span><br><span class="line">$b = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>($i = $len<span class="number">-1</span>; $i &gt;= <span class="number">0</span>; $i--)</span><br><span class="line">&#123;</span><br><span class="line">$b .= $a[$i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> str(<span class="string">'abcdef'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="不断在文件hello-txt头部写入一行“Hello-World”字符串，要求代码完整"><a href="#不断在文件hello-txt头部写入一行“Hello-World”字符串，要求代码完整" class="headerlink" title="不断在文件hello.txt头部写入一行“Hello World”字符串，要求代码完整"></a>不断在文件hello.txt头部写入一行“Hello World”字符串，要求代码完整</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$fp=fopen(<span class="string">'hello.txt'</span>, <span class="string">'r'</span>);</span><br><span class="line"></span><br><span class="line">$str=<span class="string">'hello!'</span>.<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$str.=fread($fp, filesize(<span class="string">'./hello.txt'</span>));</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line">$fp1=fopen(<span class="string">'hello.txt'</span>, <span class="string">'w'</span>);</span><br><span class="line"></span><br><span class="line">fwrite($fp1, $str);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要用于自己学习(●’◡’●)&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://vonfly.github.io/categories/PHP/"/>
    
    
      <category term="面试" scheme="https://vonfly.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>收集、总结的一些PHP理论知识（对于面试有帮助）</title>
    <link href="https://vonfly.github.io/2017/02/28/php-knowledge/"/>
    <id>https://vonfly.github.io/2017/02/28/php-knowledge/</id>
    <published>2017-02-28T11:43:19.000Z</published>
    <updated>2018-08-22T11:54:19.390Z</updated>
    
    <content type="html"><![CDATA[<p>本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。主要用于自己学习(●’◡’●)</p><a id="more"></a><h4 id="简述-private、-protected、-public修饰符的访问权限"><a href="#简述-private、-protected、-public修饰符的访问权限" class="headerlink" title="简述 private、 protected、 public修饰符的访问权限"></a>简述 private、 protected、 public修饰符的访问权限</h4><p>private: 私有成员, 在类的内部才可以访问</p><p>protected: 保护成员，该类内部和继承类中可以访问</p><p>public: 公共成员，完全公开，没有访问限制</p><h4 id="面向对象的特征有哪些方面"><a href="#面向对象的特征有哪些方面" class="headerlink" title="面向对象的特征有哪些方面?"></a>面向对象的特征有哪些方面?</h4><p>主要有封装,继承,多态。如果是4个方面则加上：抽象。</p><p>理解：</p><p>1、封装：封装是保证软件部件具有优良的模块性的基础,封装的目标就是要实现软件部件的高内聚,低耦合,防止程序相互依赖性而带来的变动影响</p><p>2、继承：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性</p><p>3、多态：多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>4、抽象：抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。例如，看到一只蚂蚁和大象，你能够想象出它们的相同之处，那就是抽象。</p><h4 id="常见的-PHP-安全性攻击"><a href="#常见的-PHP-安全性攻击" class="headerlink" title="常见的 PHP 安全性攻击"></a>常见的 PHP 安全性攻击</h4><p>1、SQL注入：用户利用在表单字段输入SQL语句的方式来影响正常的SQL执行。</p><p>防止：<br>(1)使用mysql_real_escape_string()过滤数据<br>(2)手动检查每一数据是否为正确的数据类型<br>(3)使用预处理语句并绑定变量<br>(4)参数化SQL：是指在设计与数据库链接并访问数据时，在需要填入数值或数据的地方，使用参数 (Parameter) 来给值，用@或？来表示参数。</p><p>2、XSS攻击 ：跨站点脚本攻击，由用户输入一些数据到你的网站，其中包括客户端脚本(通常JavaScript)。如果你没有过滤就输出数据到另一个web页面，这个脚本将被执行。</p><p>防止：为了防止XSS攻击，使用PHP的htmlentities()函数过滤再输出到浏览器。</p><h4 id="抽象类和接口的概念以及区别？"><a href="#抽象类和接口的概念以及区别？" class="headerlink" title="抽象类和接口的概念以及区别？"></a>抽象类和接口的概念以及区别？</h4><p>1、抽象类：它是一种特殊的，不能被实例化的类，只能作为其他类的父类使用。使用abstract关键字声明。<br>2、接口是一种特殊的抽象类，也是一个特殊的类，使用interface声明</p><p>区别：<br>（1）抽象类的操作通过继承关键字extends实现，而接口的使用是通过implements关键字来实现。</p><p>（2）抽象类中有数据成员，可以实现数据的封装，但是接口没有数据成员。</p><p>（3）抽象类中可以有构造方法，但是接口没有构造方法。</p><p>（4）抽象类的方法可以通过private、protected、public关键字修饰（抽象方法不能是private），而接口中的方法只能使用public关键字修饰。</p><p>（5）一个类只能继承于一个抽象类，而一个类可以同时实现多个接口。</p><p>（6）抽象类中可以有成员方法的实现代码，而接口中不可以有成员方法的实现代码。</p><h4 id="什么是构造函数，什么是析构函数，作用是什么？"><a href="#什么是构造函数，什么是析构函数，作用是什么？" class="headerlink" title="什么是构造函数，什么是析构函数，作用是什么？"></a>什么是构造函数，什么是析构函数，作用是什么？</h4><p>1、构造函数（方法）是对象创建完成后第一个被对象自动调用的方法。它存在于每个声明的类中，是一个特殊的成员方法。作用是执行一些初始化的任务。Php中使用__construct()声明构造方法，并且只能声明一个</p><p>2、析构函数（方法）作用和构造方法正好相反，是对象被销毁之前最后一个被对象自动调用的方法。是PHP5中新添加的内容作用是用于实现在销毁一个对象之前执行一些特定的操作，诸如关闭文件和释放内存等。</p><h4 id="如何重载父类的方法，举例说明"><a href="#如何重载父类的方法，举例说明" class="headerlink" title="如何重载父类的方法，举例说明"></a>如何重载父类的方法，举例说明</h4><p>1、重载，即覆盖父类的方法，也就是使用子类中的方法替换从父类中继承的方法，也叫方法的重写。</p><p>2、覆盖父类方法的关键是在子类中创建于父类中相同的方法包括方法的名称、参数和返回值类型。PHP中只要求方法的名称相同即可。</p><h4 id="this和self、parent这三个关键词分别代表什么？在哪些场合下使用？"><a href="#this和self、parent这三个关键词分别代表什么？在哪些场合下使用？" class="headerlink" title="$this和self、parent这三个关键词分别代表什么？在哪些场合下使用？"></a>$this和self、parent这三个关键词分别代表什么？在哪些场合下使用？</h4><p>1、$this 当前对象</p><p>2、self  当前类</p><p>3、parent  当前类的父类</p><p>使用场合：</p><p>$this在当前类中使用,使用-&gt;调用属性和方法。</p><p>self也在当前类中使用，不过需要使用::调用。</p><p>parent在类中使用。</p><h4 id="类中如何定义常量、如何类中调用常量、如何在类外调用常量。"><a href="#类中如何定义常量、如何类中调用常量、如何在类外调用常量。" class="headerlink" title="类中如何定义常量、如何类中调用常量、如何在类外调用常量。"></a>类中如何定义常量、如何类中调用常量、如何在类外调用常量。</h4><p>1、类中的常量也就是成员常量，常量就是不会改变的量，是一个恒值。</p><p>2、定义常量使用关键字const 例如：const PI = 3.1415326;</p><p>如何调用：</p><p>无论是类内还是类外，常量的访问和变量是不一样的，常量不需要实例化对象，<br>访问常量的格式都是类名加作用域操作符号（双冒号）来调用。<br>即：类名 :: 类常量名;</p><h4 id="堆和栈的区别？"><a href="#堆和栈的区别？" class="headerlink" title="堆和栈的区别？"></a>堆和栈的区别？</h4><p>1、栈是编译期间就分配好的内存空间，因此你的代码中必须就栈的大小有明确的定义； </p><p>2、堆是程序运行期间动态分配的内存空间，你可以根据程序的运行情况确定要分配的堆内存的大小。</p><h4 id="请说明php中传值与传引用的区别。什么时候传值什么时候传引用"><a href="#请说明php中传值与传引用的区别。什么时候传值什么时候传引用" class="headerlink" title="请说明php中传值与传引用的区别。什么时候传值什么时候传引用?"></a>请说明php中传值与传引用的区别。什么时候传值什么时候传引用?</h4><p>按值传递：函数范围内对值的任何改变在函数外部都会被忽略</p><p>按引用传递：函数范围内对值的任何改变在函数外部也能反映出这些修改</p><p>优缺点：按值传递时，php必须复制值。特别是对于大型的字符串和对象来说，这将会是一个代价很大的操作。</p><p>按引用传递则不需要复制值，对于性能提高很有好处。</p><h4 id="请举例说明在你的开发过程中用什么方法来加快页面的加载速度"><a href="#请举例说明在你的开发过程中用什么方法来加快页面的加载速度" class="headerlink" title="请举例说明在你的开发过程中用什么方法来加快页面的加载速度"></a>请举例说明在你的开发过程中用什么方法来加快页面的加载速度</h4><p>1、要用到服务器资源时才打开，及时关闭服务器资源<br>2、数据库添加索引<br>3、页面可生成静态<br>4、图片等大文件单独服务器<br>5、使用代码优化工具</p><h4 id="get与post两种方式的区别"><a href="#get与post两种方式的区别" class="headerlink" title="get与post两种方式的区别?"></a>get与post两种方式的区别?</h4><p>1、get从服务器获取数据，post向服务器传送数据</p><p>2、get传值在url中可见，post在url中不可见</p><p>3、get传值一般在2KB以内，post传值大小可以在php.ini中进行设置</p><p>4、get安全性非低，post安全性较高，执行效率却比post高</p><p>建议：<br>1、get式安全性较Post式要差些包含机密信息建议用Post数据提交式；</p><p>2、做数据查询建议用Get式；做数据添加、修改或删除建议用Post方式；</p><h4 id="为什么get比post更快"><a href="#为什么get比post更快" class="headerlink" title="为什么get比post更快"></a>为什么get比post更快</h4><p>1、post请求包含更多的请求头<br>2、post在真正接受数据之前会先将请求头发送给服务器进行确认，然后才真正发送数<br>3、get会将数据缓存起来，而post不会<br>4、post不能进行管道化传输</p><h4 id="Cookie和session的区别，禁止了cookie后session能正常使用吗-session的缺点是什么-session在服务器端是存在哪里的-是共有的还是私有的"><a href="#Cookie和session的区别，禁止了cookie后session能正常使用吗-session的缺点是什么-session在服务器端是存在哪里的-是共有的还是私有的" class="headerlink" title="Cookie和session的区别，禁止了cookie后session能正常使用吗?session的缺点是什么?session在服务器端是存在哪里的?是共有的还是私有的?"></a>Cookie和session的区别，禁止了cookie后session能正常使用吗?session的缺点是什么?session在服务器端是存在哪里的?是共有的还是私有的?</h4><p>答：<br>COOKIE保存在客户端，用户通过手段可以进行修改，不安全，单个cookie允许的最大值是3k。</p><p>而SESSION保存在服务器端，相对比较安全，大小没有限制。</p><p>Session依赖于cookie进行传递。</p><p>禁用了cookie之后session不能正常使用。</p><p>Session的缺点：保存在服务器端，每次读取都从服务器进行读取，对服务器有资源消耗。</p><p>Session保存在服务器端的文件或数据库中，默认保存在文件中，文件路径由php配置文件的session.save_path指定。</p><p>Session文件是公有的。</p><h4 id="写几个魔术方法并说明作用"><a href="#写几个魔术方法并说明作用" class="headerlink" title="写几个魔术方法并说明作用?"></a>写几个魔术方法并说明作用?</h4><p>__call()调用一个不存在的方法的时候调用</p><p>__autoload()在实例化一个尚未被定义的类是会自动调用次方法来加载类文件</p><p>__set()在给未定义的属性赋值的时候调用</p><p>__get()调用未定义的属性时候调用</p><p>__construct()构造方法，实例化类时自动调用的方法</p><p>__destroy()销毁对象时自动调用的方法</p><p>__unset()当对一个未定义变量调用unset()时自动调用的方法</p><p>__isset()当对一个未定义变量调用isset()方法时自动调用的方法</p><p>__clone()克隆一个对象</p><p>__tostring()当输出一个对象时自动调用的方法</p><h4 id="PHP数组排序"><a href="#PHP数组排序" class="headerlink" title="PHP数组排序"></a>PHP数组排序</h4><p>sort() - 以升序对数组排序<br>rsort() - 以降序对数组排序<br>asort() - 根据值，以升序对关联数组进行排序<br>ksort() - 根据键，以升序对关联数组进行排序<br>arsort() - 根据值，以降序对关联数组进行排序<br>krsort() - 根据键，以降序对关联数组进行排序</p><h4 id="数组中下标最好是什么类型的，为什么"><a href="#数组中下标最好是什么类型的，为什么" class="headerlink" title="数组中下标最好是什么类型的，为什么?"></a>数组中下标最好是什么类型的，为什么?</h4><p>数组的下标最好是数字类型的，数字类型的处理速度快</p><h4 id="i和i-哪一个效率高，为什么"><a href="#i和i-哪一个效率高，为什么" class="headerlink" title="++i和i++哪一个效率高，为什么?"></a>++i和i++哪一个效率高，为什么?</h4><p>++i效率比i++的效率更高，因为++i少了一个返回i的过程。</p><h4 id="echo-、print-、print-r-的区别"><a href="#echo-、print-、print-r-的区别" class="headerlink" title="echo()、print()、print_r()的区别?"></a>echo()、print()、print_r()的区别?</h4><p>echo 是php语法，可以输出多个变量，不能输出数组。</p><p>print()是php中的函数，只能输出简单的变量。</p><p>print_r()是php中的函数，可以输出变量也可以输出数组。</p><h4 id="框架中什么是单一入口和多入口，单一入口的优缺点"><a href="#框架中什么是单一入口和多入口，单一入口的优缺点" class="headerlink" title="框架中什么是单一入口和多入口，单一入口的优缺点?"></a>框架中什么是单一入口和多入口，单一入口的优缺点?</h4><p>1、多入口就是通过访问不同的文件来完成用户请求。<br>单一入口只web程序所有的请求都指向一个脚本文件的</p><p>2、单一入口更容易控制权限，方便对http请求可以进行安全性检查。</p><p>缺点：URL看起来不那么美观，特别是对搜索引擎来说不友好。</p><h4 id="提示类型200、404、502是什么意思。"><a href="#提示类型200、404、502是什么意思。" class="headerlink" title="提示类型200、404、502是什么意思。"></a>提示类型200、404、502是什么意思。</h4><p>1、200是请求成功</p><p>2、404是文件未找到</p><p>3、502是服务器内部错误</p><h4 id="include，include-once，require，require-once的区别"><a href="#include，include-once，require，require-once的区别" class="headerlink" title="include，include_once，require，require_once的区别"></a>include，include_once，require，require_once的区别</h4><p>1、include,require在其被调用的位置处包含一个文件。</p><p>2、include_once,require_once函数的作用与include相同，不过它会首先验证是否已包含该文件。如果已经包含，则不再执行include_once。其他同include一样。</p><p>3、require与include最主要的区别，a、require出错时，脚本将停止运行，而include出错的情况下，脚本将继续执行。b、无论require的位置如何，制定文件都将包含到出现require的脚本中。例如，即使require放在计算结果为假的if语句中，依然会包含指定文件。</p><p>4、使用require_once可以解决文件被覆盖的问题。 require_once函数确保文件只包含一次。在遇到require_once后，后面再试图包含相同的文件时将被忽略。</p><h4 id="PHP字符串中单引号与双引号的区别"><a href="#PHP字符串中单引号与双引号的区别" class="headerlink" title="PHP字符串中单引号与双引号的区别?"></a>PHP字符串中单引号与双引号的区别?</h4><p>单引号不能解释变量，而双引号可以解释变量。<br>单引号不能转义字符，在双引号中可以转义字符。</p><h4 id="php中-模板引擎的目的是什么-你用过哪些模板引擎"><a href="#php中-模板引擎的目的是什么-你用过哪些模板引擎" class="headerlink" title="php中,模板引擎的目的是什么? 你用过哪些模板引擎?"></a>php中,模板引擎的目的是什么? 你用过哪些模板引擎?</h4><p>使用模板引擎的目的是使程序的逻辑代码和html界面代码分离开，是程序的结构更清晰。<br>使用过的模板引擎：Smarty、ThinkPHP的ThinkTemplate</p><h4 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h4><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器施加的安全限制</p><p>解决：<br>1、CORS（跨资源共享）<br>在php接口脚本中加入以下两句即可：<br>header(‘Access-Control-Allow-Origin:*’);//允许所有来源访问<br>header(‘Access-Control-Allow-Method:POST,GET’);//允许访问的方式</p><p>2、JSONP。要注意JSONP只支持GET请求，不支持POST请求</p><h4 id="怎么保证促销商品不会超卖"><a href="#怎么保证促销商品不会超卖" class="headerlink" title="怎么保证促销商品不会超卖"></a>怎么保证促销商品不会超卖</h4><p>第一种方案是：在每次下订单前我们判断促销商品的数量够不够，不够不允许下订单，更改库存量时加上一个条件，只更改商品库存大于0的商品的库存，当时我们使用ab进行压力测试，当并发超过500，访问量超过2000时，还是会出现超卖现象。</p><p>第二种方案是：使用mysql的事务加排他锁来解决，首先我们选择数据库的存储引擎为innoDB，使用的是排他锁实现的，刚开始的时候我们测试了下共享锁，发现还是会出现超卖的现象。有个问题是，当我们进行高并发测试时，对数据库的性能影响很大，导致数据库的压力很大</p><p>第三种方案是：使用文件锁实现。当用户抢到一件促销商品后先触发文件锁，防止其他用户进入，该用户抢到促销品后再解开文件锁，放其他用户进行操作。这样可以解决超卖的问题，但是会导致文件得I/O开销很大。</p><p>最后我们使用了redis的队列来实现。将要促销的商品数量以队列的方式存入redis中，每当用户抢到一件促销商品则从队列中删除一个数据，确保商品不会超卖。这个操作起来很方便，而且效率极高，最终我们采取这种方式来实现</p><h4 id="你对Memcach的理解，优点有哪些"><a href="#你对Memcach的理解，优点有哪些" class="headerlink" title="你对Memcach的理解，优点有哪些?"></a>你对Memcach的理解，优点有哪些?</h4><p>Memcache是一种缓存技术，在一定的时间内将动态网页经过解析之后保存到文件，下次访问时动态网页就直接调用这个文件，而不必在重新访问数据库。使用memcache做缓存的好处是：提高网站的访问速度，减轻高并发时服务器的压力。</p><p>Memcache的优点：稳定、配置简单、多机分布式存储、速度快。</p><h4 id="redis和memcacahe、mongoDB的区别？"><a href="#redis和memcacahe、mongoDB的区别？" class="headerlink" title="redis和memcacahe、mongoDB的区别？"></a>redis和memcacahe、mongoDB的区别？</h4><p>都是非关系型数据库，性能都非常高，但是mongoDB和memcache、redis是不同的两种类型。后两者主要用于数据的缓存，前者主要用在查询和储存大数据方面，是最接近数据库的文档型的非关系数据库。</p><p>1、从数据存储位置上来分，memcache的数据存在内存中，而redis既可以存储在内存中，也可以存储的到磁盘中，达到持久化存储的功能，memcache一旦断电，数据全部丢失，redis可以利用快照和AOF把数据存到磁盘中，当恢复时又从磁盘中读取到内存中，当物理内存使用完毕后，可以把数据写入到磁盘中。</p><p>2、从存储数据的类型上来分，memcache和redis存储的方式都是键值对，只不过redis值的类型比较丰富，有string(字符串),hash(哈希)，list(列表),set(集合)zset(有序集合)，而memcache主要存储的是字符串。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本页面主要用于编写一些理论知识，从网上找的或者自己总结的都会有。主要用于自己学习(●’◡’●)&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://vonfly.github.io/categories/PHP/"/>
    
    
      <category term="面试" scheme="https://vonfly.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="理论知识" scheme="https://vonfly.github.io/tags/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>mysql面试（理论）</title>
    <link href="https://vonfly.github.io/2017/02/28/mysql-knowledge/"/>
    <id>https://vonfly.github.io/2017/02/28/mysql-knowledge/</id>
    <published>2017-02-28T11:43:18.000Z</published>
    <updated>2018-08-22T11:54:19.388Z</updated>
    
    <content type="html"><![CDATA[<p>本页面主要用于编写mysql理论知识，有时间多看看巩固一下！</p><a id="more"></a><h4 id="什么是事务？及其特性？"><a href="#什么是事务？及其特性？" class="headerlink" title="什么是事务？及其特性？"></a>什么是事务？及其特性？</h4><p>事务：是一系列的数据库操作，是数据库应用的基本逻辑单位</p><p>事务特性：<br>1、原子性：即不可分割性，事务要么全部被执行，要么就全部不被执行。</p><p>2、一致性或可串性：事务的执行使得数据库从一种正确状态转换成另一种正确状态</p><p>3、隔离性：在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务，</p><p>4、持久性：事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。</p><h4 id="MySQL数据库中的字段类型varchar和char的主要区别是什么-哪种字段的查找效率更高，为什么"><a href="#MySQL数据库中的字段类型varchar和char的主要区别是什么-哪种字段的查找效率更高，为什么" class="headerlink" title="MySQL数据库中的字段类型varchar和char的主要区别是什么?哪种字段的查找效率更高，为什么?"></a>MySQL数据库中的字段类型varchar和char的主要区别是什么?哪种字段的查找效率更高，为什么?</h4><p>1、varchar是变长，节省存储空间，char是固定长度。</p><p>2、char型查找效率更高。因为varchar是非定长，必须先查找长度，然后进行数据的提取，比char定长类型多了一个步骤，所以效率低一些</p><h4 id="MyISAM-和-InnoDB-的基本区别"><a href="#MyISAM-和-InnoDB-的基本区别" class="headerlink" title="MyISAM 和 InnoDB 的基本区别?"></a>MyISAM 和 InnoDB 的基本区别?</h4><p>1、MYISAM不支持外键和事务处理，采用表锁机制，查询速度稍快，数据存储文件有3个</p><p>2、InnoDB支持外键和事务处理，采用行锁机制，查询速度比MYISAM稍慢，数据存储文件只有一个。</p><h4 id="对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题"><a href="#对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题" class="headerlink" title="对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:"></a>对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:</h4><p>a) 索引的目的是什么?</p><p>b) 索引对数据库系统的负面影响是什么?</p><p>c) 为数据表建立索引的原则有哪些?</p><p>d) 什么情况下不宜建立索引?</p><p>答：<br>索引的目的：</p><p>1、快速访问数据表中的特定信息，提高检索速度</p><p>2、创建唯一性索引，保证数据库表中每一行数据的唯一性</p><p>3、加速表和表之间的连接</p><p>4、使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p><p>负面影响：创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改的时候索引也要动态维护，这样就降低了数据的维护速度。</p><p>建立索引的原则：</p><p>1、在最频繁使用的、用于缩小查询范围的字段上建立索引</p><p>2、需要排序的字段上建立索引</p><p>什么情况下不宜建立索引：</p><p>1、对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引</p><p>2、对于一些特殊的数据类型，不宜建立索引，比如文本字段(text)等。</p><h4 id="主键、外键和索引的区别"><a href="#主键、外键和索引的区别" class="headerlink" title="主键、外键和索引的区别"></a>主键、外键和索引的区别</h4><p>定义的区别：<br>主键：唯一标识一条记录，不能有重复的，不允许为空</p><p>外键：表的外键是另一表的主键, 外键可以有重复的, 可以是空值</p><p>索引：是对数据库表中一列或多列的值进行排序的一种结构</p><p>作用的区别：<br>主键：用来保证数据完整性</p><p>外键：用来和其他表建立联系用的</p><p>索引：是提高查询排序的速度</p><p>个数的区别：<br>主键：主键只能有一个</p><p>外键：一个表可以有多个外键</p><p>索引：一个表可以有多个唯一索引</p><h4 id="说说对SQL语句优化有哪些方法？"><a href="#说说对SQL语句优化有哪些方法？" class="headerlink" title="说说对SQL语句优化有哪些方法？"></a>说说对SQL语句优化有哪些方法？</h4><p>1、对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p>2、应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p><p>3、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><p>select id from t where num is null</p><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><p>select id from t where num=0</p><p>4、应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><p>select id from t where num=10 or num=20</p><p>可以这样查询：</p><p>select id from t where num=10</p><p>union all</p><p>select id from t where num=20</p><p>5、下面的查询也将导致全表扫描：</p><p>select id from t where name like ‘%abc%’</p><p>若要提高效率，可以考虑全文检索。</p><p>6、in 和 not in 也要慎用，否则会导致全表扫描，如：</p><p>select id from t where num in(1,2,3)</p><p>对于连续的数值，能用 between 就不要用 in 了：</p><p>select id from t where num between 1 and 3</p><p>7、如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p><p>select id from t where num=@num</p><p>可以改为强制查询使用索引：</p><p>select id from t with(index(索引名)) where num=@num</p><p>8、应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>select id from t where num/2=100</p><p>应改为:</p><p>select id from t where num=100*2</p><p>9、应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>select id from t where substring(name,1,3)=’abc’–name以abc开头的id</p><p>select id from t where datediff(day,createdate,’2005-11-30’)=0–’2005-11-30’生成的id</p><p>应改为:</p><p>select id from t where name like ‘abc%’</p><p>select id from t where createdate&gt;=’2005-11-30’ and createdate&lt;’2005-12-1’</p><p>10、不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><p>11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p><p>12、不要写一些没有意义的查询，如需要生成一个空表结构：<br>select col1,col2 into #t from t where 1=0<br>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br>create table #t(…)</p><p>13、很多时候用 exists 代替 in 是一个好的选择：<br>select num from a where num in(select num from b)<br>用下面的语句替换：<br>select num from a where exists(select 1 from b where num=a.num)</p><p>14、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p><p>15、索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p><p>16、应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p><p>17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>18、尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>19、任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p><p>20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p><p>21、避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><p>22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p><p>23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p><p>24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p><p>25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><p>26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p><p>27、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p><p>28、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p><p>29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p>30、尽量避免大事务操作，提高系统并发能力。</p><h4 id="web应用中-数据库的读取频率远高于写入频率-如何优化MySQL而应对此种情景"><a href="#web应用中-数据库的读取频率远高于写入频率-如何优化MySQL而应对此种情景" class="headerlink" title="web应用中,数据库的读取频率远高于写入频率, 如何优化MySQL而应对此种情景 ?"></a>web应用中,数据库的读取频率远高于写入频率, 如何优化MySQL而应对此种情景 ?</h4><p>1、使用memcache缓存技术，将动态数据缓存到文件，访问动态页面时直接调用缓存文件，而不必重新访问数据库，这样就减少了查询数据库的次数。</p><p>2、如果网站的访问量很大，可以把数据库读写服务器分开，使用多态服务器去处理数据库查询，使用较少的服务器去处理数据库的写入和修改。</p><p>3、页面静态化</p><h4 id="MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年-怎么优化？"><a href="#MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年-怎么优化？" class="headerlink" title="MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？"></a>MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？</h4><p>1、设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。</p><p>2、选择合适的表字段数据类型和存储引擎，适当的添加索引。</p><p>3、mysql库主从读写分离。</p><p>4、找规律分表，减少单表中的数据量提高查询速度。</p><p>5、添加缓存机制，比如memcached，apc等。</p><p>6、不经常改动的页面，生成静态页面。</p><p>7、书写高效率的SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE</p><h4 id="写出三种以上MySQL数据库存储引擎的名称"><a href="#写出三种以上MySQL数据库存储引擎的名称" class="headerlink" title="写出三种以上MySQL数据库存储引擎的名称"></a>写出三种以上MySQL数据库存储引擎的名称</h4><p>MyISAM、InnoDB、BDB（Berkeley DB）、Merge、Memory（Heap）、Example、Federated、Archive、CSV、Blackhole、MaxDB 等等十几个引擎</p><h4 id="指出以下代码片段中的SQL注入漏洞以及解决方法-magic-quotes-gpc-off"><a href="#指出以下代码片段中的SQL注入漏洞以及解决方法-magic-quotes-gpc-off" class="headerlink" title="指出以下代码片段中的SQL注入漏洞以及解决方法(magic_quotes_gpc = off)"></a>指出以下代码片段中的SQL注入漏洞以及解决方法(magic_quotes_gpc = off)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">"select id,title from content where catid='&#123;$_GET[catid]&#125;' and title like '%$_GET[keywords]%'"</span>, $link);</span><br></pre></td></tr></table></figure><p>注入漏洞主要存在用户提交的数据上，这里的注入漏洞主要是$_GET[catid]和$_GET[keyword]</p><p>解决注入漏洞：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$_GET[catid]=intval($_GET[catid]);</span><br><span class="line"></span><br><span class="line">$sql=<span class="string">"select id,title from content where catid='&#123;$_GET[catid]&#125;' and title like '%$_GET[keywords]%"</span>;</span><br><span class="line"></span><br><span class="line">$sql=addslashes($sql);</span><br><span class="line"></span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure></p><h4 id="SQL语言包括哪几部分？每部分都有哪些操作关键字？"><a href="#SQL语言包括哪几部分？每部分都有哪些操作关键字？" class="headerlink" title="SQL语言包括哪几部分？每部分都有哪些操作关键字？"></a>SQL语言包括哪几部分？每部分都有哪些操作关键字？</h4><p>答：SQL语言包括数据定义(DDL)、数据操纵(DML),数据控制(DCL)和数据查询（DQL）四个部分。</p><p>数据定义：Create Table,Alter Table,Drop Table, Craete/Drop Index等</p><p>数据操纵：select ,insert,update,delete,</p><p>数据控制：grant,revoke</p><p>数据查询：select</p><h4 id="什么是锁？"><a href="#什么是锁？" class="headerlink" title="什么是锁？"></a>什么是锁？</h4><p>1、数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p><p>2、加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p><p>3、基本锁类型：锁包括行级锁和表级锁</p><h4 id="完整性约束包括哪些？"><a href="#完整性约束包括哪些？" class="headerlink" title="完整性约束包括哪些？"></a>完整性约束包括哪些？</h4><p>1、数据完整性(Data Integrity)是指数据的精确(Accuracy)和可靠性(Reliability)。<br>(1) 实体完整性：规定表的每一行在表中是惟一的实体。<br>(2) 域完整性：是指表中的列必须满足某种特定的数据类型约束，其中约束又包括取值范围、精度等规定。<br>(3) 参照完整性：是指两个表的主关键字和外关键字的数据应一致，保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。<br>(4) 用户定义的完整性：不同的关系数据库系统根据其应用环境的不同，往往还需要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束条件，它反映某一具体应用必须满足的语义要求。</p><p>2、与表有关的约束：包括列约束(NOT NULL（非空约束）)和表约束(PRIMARY KEY、foreign key、check、UNIQUE) 。</p><h4 id="什么叫视图？游标是什么？"><a href="#什么叫视图？游标是什么？" class="headerlink" title="什么叫视图？游标是什么？"></a>什么叫视图？游标是什么？</h4><p>1、视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p><p>2、游标：是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。</p><h4 id="试述视图的优点？"><a href="#试述视图的优点？" class="headerlink" title="试述视图的优点？"></a>试述视图的优点？</h4><p>1、视图能够简化用户的操作</p><p>2、视图使用户能以多种角度看待同一数据</p><p>3、视图为数据库提供了一定程度的逻辑独立性</p><p>4、视图能够对机密数据提供安全保护。</p><h4 id="什么是存储过程？用什么来调用？"><a href="#什么是存储过程？用什么来调用？" class="headerlink" title="什么是存储过程？用什么来调用？"></a>什么是存储过程？用什么来调用？</h4><p>1、存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。</p><p>2、可以用一个命令对象来调用存储过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本页面主要用于编写mysql理论知识，有时间多看看巩固一下！&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://vonfly.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://vonfly.github.io/tags/mysql/"/>
    
      <category term="面试" scheme="https://vonfly.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="理论知识" scheme="https://vonfly.github.io/tags/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>搭建SVN服务器</title>
    <link href="https://vonfly.github.io/2017/02/26/server-build-svn/"/>
    <id>https://vonfly.github.io/2017/02/26/server-build-svn/</id>
    <published>2017-02-26T01:24:08.000Z</published>
    <updated>2018-08-22T11:54:19.391Z</updated>
    
    <content type="html"><![CDATA[<p>在 Centos5.5 上搭建SVN服务器并实现自动同步至web目录。<br><a id="more"></a></p><h2 id="一、搭建svn环境并创建仓库："><a href="#一、搭建svn环境并创建仓库：" class="headerlink" title="一、搭建svn环境并创建仓库："></a>一、搭建svn环境并创建仓库：</h2><h3 id="安装Subversion"><a href="#安装Subversion" class="headerlink" title="安装Subversion"></a>安装Subversion</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y subversion</span><br></pre></td></tr></table></figure><h3 id="检测是否安装成功-查看svn版本号"><a href="#检测是否安装成功-查看svn版本号" class="headerlink" title="检测是否安装成功(查看svn版本号)"></a>检测是否安装成功(查看svn版本号)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve --version</span><br></pre></td></tr></table></figure><h3 id="创建版本库（没有规定在哪创建目录）"><a href="#创建版本库（没有规定在哪创建目录）" class="headerlink" title="创建版本库（没有规定在哪创建目录）"></a>创建版本库（没有规定在哪创建目录）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/svn//先建目录</span><br><span class="line">cd /home/svn//进入目录</span><br><span class="line">svnadmin create /home/svn/test//创建版本库</span><br><span class="line">cd test//进入创建的版本库</span><br><span class="line">ls//会看到自动生成的版本库文件（如下图）</span><br></pre></td></tr></table></figure><p><img src="http://olixffhc0.bkt.clouddn.com/server_svn1.jpg" alt="版本库文件列表"></p><h2 id="创建用户组及用户"><a href="#创建用户组及用户" class="headerlink" title="创建用户组及用户"></a>创建用户组及用户</h2><p>进入版本库中的配置目录conf</p><h3 id="修改权限配置文件"><a href="#修改权限配置文件" class="headerlink" title="修改权限配置文件"></a>修改权限配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim authz</span><br></pre></td></tr></table></figure><p><img src="http://olixffhc0.bkt.clouddn.com/server_svn2.jpg" alt="权限配置"></p><h3 id="配置用户名命令文件"><a href="#配置用户名命令文件" class="headerlink" title="配置用户名命令文件"></a>配置用户名命令文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim passwd</span><br></pre></td></tr></table></figure><p><img src="http://olixffhc0.bkt.clouddn.com/server_svn3.jpg" alt="用户名密码配置"></p><h3 id="配置SVN服务综合配置文件"><a href="#配置SVN服务综合配置文件" class="headerlink" title="配置SVN服务综合配置文件"></a>配置SVN服务综合配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim svnserve.conf</span><br></pre></td></tr></table></figure><p>//找到以下配置项，将前面的#号去掉（注意：所有配置项前面不能留空格），然后做相应的配置<br>anon-access = none      //匿名用户访问权限:无<br>auth-access = write     //普通用户访问权限:写<br>password-db = passwd    //引入密码文件<br>authz-db = authz        //引入权限配置文件<br>realm = /home/svn/test   //版本库所在</p><h3 id="启动svn服务"><a href="#启动svn服务" class="headerlink" title="启动svn服务"></a>启动svn服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r /home/svn</span><br></pre></td></tr></table></figure><p>其中 -d表示(独立端口运行)    -r表示(仓库地址)<br>svn服务走svn协议，端口号是3690</p><p>如果提示：svnserve: E000098: Can’t bind server socket: Address already in use<br>证明现在svn已经被启动了，由于我们修改了配置文件，因此要重启svn服务，所以要先关闭svn再重启svn</p><p>查看svn服务详情（如下图所示）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep svn</span><br></pre></td></tr></table></figure></p><p>将svn服务强制停止  其中790为svn服务的ID号，-9是kill的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 790</span><br></pre></td></tr></table></figure></p><p>最后再重新运行 svnserve -d -r /var/svn</p><h3 id="测试有没有成功"><a href="#测试有没有成功" class="headerlink" title="测试有没有成功"></a>测试有没有成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /www</span><br><span class="line">mkdir test</span><br><span class="line">svn co svn://localhost/test /www/test --username vonfly(SVN账号) --password vonfly(SVN密码)</span><br></pre></td></tr></table></figure><p>如果提示：Checked out revision 0.<br>表示checkout成功<br><img src="http://olixffhc0.bkt.clouddn.com/server_svn4.jpg" alt="Checked"></p><h2 id="本地拉取、推送（本地要先安装SVN客户端）"><a href="#本地拉取、推送（本地要先安装SVN客户端）" class="headerlink" title="本地拉取、推送（本地要先安装SVN客户端）"></a>本地拉取、推送（本地要先安装SVN客户端）</h2><p>输入远程链接：svn://服务器iP地址/test，再输入用户名和密码即可链接</p><h2 id="本地commit时自动同步到web目录"><a href="#本地commit时自动同步到web目录" class="headerlink" title="本地commit时自动同步到web目录"></a>本地commit时自动同步到web目录</h2><p>实现本地更新同步到服务器项目：配置项目仓库的钩子配置,可以把钩子看成是WEB项目于SVN项目仓库之间的一个关联，通过向SVN项目仓库提交脚本代码，利用钩子shell脚本可以自动向web项目中将脚本文件更新过去</p><h3 id="进入-var-svn-project-hooks下，建立post-commit文件"><a href="#进入-var-svn-project-hooks下，建立post-commit文件" class="headerlink" title="进入/var/svn/project/hooks下，建立post-commit文件"></a>进入/var/svn/project/hooks下，建立post-commit文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/svn/project/hooks</span><br><span class="line">vim post-commit</span><br></pre></td></tr></table></figure><p>在该文件里添加如下代码：</p><p>#!/bin/sh<br>export LANG=zh_CN.UTF-8<br>SVN_PATH=/usr/bin/svn   //这里不用改<br>WEB_PATH=/www/test  //对应自己web目录<br>//这里的用户随便一个就好<br>$SVN_PATH update $WEB_PATH –username ‘vonfly’ –password ‘vonfly’ –no-auth-cache</p><p><img src="http://olixffhc0.bkt.clouddn.com/server_svn5.jpg" alt="post-commit"></p><h3 id="给post-commit-执行权限"><a href="#给post-commit-执行权限" class="headerlink" title="给post-commit 执行权限"></a>给post-commit 执行权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 post-commit</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="具体权限表示"><a href="#具体权限表示" class="headerlink" title="具体权限表示"></a>具体权限表示</h3><p>r(read)读【有update操作】    w(write)写【有commit操作】</p><h3 id="开启只操作某个目录的权限"><a href="#开启只操作某个目录的权限" class="headerlink" title="开启只操作某个目录的权限"></a>开启只操作某个目录的权限</h3><p>要求：给帐号设置只操作temp目录的权限，只能给操作temp目录的用户只读权限<br>对应的权限文件（authz）设置<br>[test:/temp]<br>temp1 = r<br>temp2 = r<br>…..<br>对应的本地客户端拉取就要：输入远程链接：svn://服务器iP地址/test/temp<br>说明：这样的设置不会影响到之前[test:/]的设置，两个设置可以共存</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Centos5.5 上搭建SVN服务器并实现自动同步至web目录。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://vonfly.github.io/categories/Linux/"/>
    
    
      <category term="Centos" scheme="https://vonfly.github.io/tags/Centos/"/>
    
      <category term="SVN" scheme="https://vonfly.github.io/tags/SVN/"/>
    
      <category term="版本控制" scheme="https://vonfly.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Sublime使用技巧</title>
    <link href="https://vonfly.github.io/2017/02/17/sublime/"/>
    <id>https://vonfly.github.io/2017/02/17/sublime/</id>
    <published>2017-02-17T12:33:48.000Z</published>
    <updated>2018-08-22T11:54:19.391Z</updated>
    
    <content type="html"><![CDATA[<p>sublime使用技巧，平时用的时候觉得不错的功能就会把它分享给大家(●’◡’●)<br><a id="more"></a></p><h2 id="sublime右键快捷方式添加"><a href="#sublime右键快捷方式添加" class="headerlink" title="sublime右键快捷方式添加"></a>sublime右键快捷方式添加</h2><p>window下，开始-&gt;运行-&gt;regedit<br>到 HKEY_CLASSES_ROOT*\shell目录下<br>新建sublime(随便你起什么名字)<br>再到新建好的sublime目录下新建command(固定名字)</p><p>最后的目录结构【HKEY_CLASSES_ROOT*\shell\sublime\command】</p><p>第一个双引号是你的软件安装目录<br>“E:\Sublime Text 3  Build 3103 x64 Portable Cracked (2016.02.11)\sublime_text.exe” -p –remote-tab-silent “%1”</p><p>window如何查看软件安装目录，如下图说明：<br><img src="http://olixffhc0.bkt.clouddn.com/sublime2.jpg" alt="window如何查看软件安装目录"></p><p>选中上一步建好的文件command，然后双击右边的默认，把上边的内容复制进去即可。如下图说明<br><img src="http://olixffhc0.bkt.clouddn.com/sublime1.jpg" alt="sublime1"></p><p>随便找个文件sublime能够识别的文件，鼠标右击就可以看到刚刚添加的快捷键了，可以直接打开</p><h2 id="Sublime-text-2-3-中-Package-Control-的安装与使用方法"><a href="#Sublime-text-2-3-中-Package-Control-的安装与使用方法" class="headerlink" title="Sublime text 2/3 中 Package Control 的安装与使用方法"></a>Sublime text 2/3 中 Package Control 的安装与使用方法</h2><p>从菜单 View - Show Console 或者 ctrl + ~ 快捷键，调出 console。<br>将以下 Python 代码粘贴进去并 enter 执行，不出意外即完成安装。<br>以下提供 ST3 和 ST2 的安装代码：</p><p>Sublime Text 3：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), <span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read())</span><br></pre></td></tr></table></figure></p><p>Sublime Text 2：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2,os; pf=<span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> <span class="keyword">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), <span class="string">'wb'</span> ).write( urllib2.urlopen( <span class="string">'http://sublime.wbond.net/'</span> +pf.replace( <span class="string">' '</span>,<span class="string">'%20'</span> )).read()); print( <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure></p><p>常用的一些插件：<br>AdvancedNewFile        快速创建新文件<br>Better Completion    全能代码提示(需要自己配置一下插件，需要提示的库)<br>CodeFormatter        代码格式化<br>ConverToUTF8    支持 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码的插件<br>DocBlockr        代码块注释<br>Emmet<br>File Header    自动更新保存时间，文件模板<br>Side Bar<br>Monokai Extended    主题配置<br>SideBarEnhancements    增强型侧边栏</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sublime使用技巧，平时用的时候觉得不错的功能就会把它分享给大家(●’◡’●)&lt;br&gt;
    
    </summary>
    
      <category term="其它" scheme="https://vonfly.github.io/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="软件使用技巧" scheme="https://vonfly.github.io/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
      <category term="右键快捷方式添加" scheme="https://vonfly.github.io/tags/%E5%8F%B3%E9%94%AE%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E6%B7%BB%E5%8A%A0/"/>
    
  </entry>
  
  <entry>
    <title>初识gulp</title>
    <link href="https://vonfly.github.io/2016/11/02/gulp/"/>
    <id>https://vonfly.github.io/2016/11/02/gulp/</id>
    <published>2016-11-02T15:40:09.000Z</published>
    <updated>2018-08-22T11:54:19.383Z</updated>
    
    <content type="html"><![CDATA[<p>初识gulp自动化构建工具。一开始只是听过这个东西，没有尝试用过。听起来好像很高大上的样子，一直想要去尝试用一下，但一直没有去用过。一来现在的项目没有用到；二来之前好像确实是挺忙的，没有找到什么合适的时间去尝试用下；三来嘛感觉这么高大上的东西可能学起来应该会很难，会花费很多时间。<br>ps：很多事情只有去尝试了才会知道难不难，很多东西你觉得难可能是因为你没有用过它，或者不知道它是用来做什么的，只有你勇敢的踏出一步去尝试用下，你就会发现其实没有那么难。(●’◡’●)<br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。<br>利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。<br>Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。<br>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p><h2 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h2><ol><li><p>全局安装 gulp：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global gulp</span><br></pre></td></tr></table></figure></li><li><p>作为项目的开发依赖（devDependencies）安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure></li><li><p>在项目根目录下创建一个名为 gulpfile.js 的文件：<br>var gulp = require(‘gulp’);</p></li></ol><p>gulp.task(‘default’, function() {<br>  // 将你的默认的任务代码放在这<br>});</p><ol start="4"><li>运行 gulp：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp default</span><br></pre></td></tr></table></figure></li></ol><p>如博客gulpfile.js代码为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">"minhtml"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">"public/**/*.html"</span>)</span><br><span class="line">.pipe(htmlmin())</span><br><span class="line">.pipe(gulp.dest(<span class="string">"./public"</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="常用的一些插件"><a href="#常用的一些插件" class="headerlink" title="常用的一些插件"></a>常用的一些插件</h2><blockquote><ul><li>gulp-minify-css    压缩css</li><li>gulp-uglify    压缩js</li><li>gulp-htmlmin    压缩html</li><li>gulp-imagemin    压缩图片</li></ul></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install [plugins-name] --save</span><br></pre></td></tr></table></figure><p>上述命令安装插件的同时也会把插件作为项目依赖写入package.json文件.</p><p>参考：<br><a href="http://gulpjs.com/" target="_blank" rel="noopener">guly官网(包含插件搜索)</a><br><a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">guly中文网站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初识gulp自动化构建工具。一开始只是听过这个东西，没有尝试用过。听起来好像很高大上的样子，一直想要去尝试用一下，但一直没有去用过。一来现在的项目没有用到；二来之前好像确实是挺忙的，没有找到什么合适的时间去尝试用下；三来嘛感觉这么高大上的东西可能学起来应该会很难，会花费很多时间。&lt;br&gt;ps：很多事情只有去尝试了才会知道难不难，很多东西你觉得难可能是因为你没有用过它，或者不知道它是用来做什么的，只有你勇敢的踏出一步去尝试用下，你就会发现其实没有那么难。(●’◡’●)&lt;br&gt;
    
    </summary>
    
      <category term="自动化构建工具" scheme="https://vonfly.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="https://vonfly.github.io/tags/gulp/"/>
    
      <category term="代码优化" scheme="https://vonfly.github.io/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的linux-commands</title>
    <link href="https://vonfly.github.io/2016/09/06/linux-commands/"/>
    <id>https://vonfly.github.io/2016/09/06/linux-commands/</id>
    <published>2016-09-06T15:00:08.000Z</published>
    <updated>2018-08-22T11:54:19.384Z</updated>
    
    <content type="html"><![CDATA[<p>常用的一些Linux命令<br><a id="more"></a></p><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="查看目录下的文件"><a href="#查看目录下的文件" class="headerlink" title="查看目录下的文件"></a>查看目录下的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">ls -l//显示文件的详细信息(包括权限信息)</span><br><span class="line">ls -al//显示文件的详细信息(包括隐藏文件)</span><br></pre></td></tr></table></figure><h3 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd 目录名字</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir newdir1//创建单个新目录</span><br><span class="line">mkdir -p newdir1/newdir2/newdir3//递归创建多级目录</span><br></pre></td></tr></table></figure><h3 id="移动目录"><a href="#移动目录" class="headerlink" title="移动目录"></a>移动目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv dir1 dir2//dir1目录移动到dir2的目录下</span><br><span class="line">mv dir1 newdir //dir1移动到当前目录下，并改名字为newdir</span><br></pre></td></tr></table></figure><h3 id="复制（复制目录一般要加-R参数）"><a href="#复制（复制目录一般要加-R参数）" class="headerlink" title="复制（复制目录一般要加-R参数）"></a>复制（复制目录一般要加-R参数）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -R dir1 newdir//dir1复制到当前目录，并改名字为 newdir</span><br><span class="line">cp file dir1//file文件复制到dir1下</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm file//删除file文件</span><br><span class="line">rm -rf dir//递归强制删除目录</span><br></pre></td></tr></table></figure><h3 id="查看当前操作目录位置"><a href="#查看当前操作目录位置" class="headerlink" title="查看当前操作目录位置"></a>查看当前操作目录位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat filename//一次性把全部内容输出到终端</span><br><span class="line">more filename//通过敲回车方式逐行查看文件内容，q键结束查看</span><br><span class="line">less filename//&quot;上下左右&quot;键方式查看文件各部分内容，q键结束查看</span><br><span class="line">head -n filename    //查看文件的前n行内容</span><br><span class="line">tail -n filename    //查看文件的最后n行内容</span><br><span class="line">wc filename         //查看文件内容行数</span><br></pre></td></tr></table></figure><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch filename //在当前目录创建filename文件</span><br></pre></td></tr></table></figure><h3 id="给文件追加内容"><a href="#给文件追加内容" class="headerlink" title="给文件追加内容"></a>给文件追加内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo 内容 &gt; 文件//把内容以覆盖写方式添加到文件中</span><br><span class="line">echo 内容 &gt;&gt; 文件//把内容以追加方式添加到文件中</span><br><span class="line">//例：echo vonfly &gt; test</span><br></pre></td></tr></table></figure><p>说明：如果文件不存在会自动创建</p><h3 id="文件主人、组别设置"><a href="#文件主人、组别设置" class="headerlink" title="文件主人、组别设置"></a>文件主人、组别设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown 主人 filename</span><br><span class="line">chown 主人.组别名称 filename</span><br></pre></td></tr></table></figure><p>##组和用户的操作</p><h3 id="组的操作"><a href="#组的操作" class="headerlink" title="组的操作"></a>组的操作</h3><p>对应配置文件：/etc/group<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名//创建组（例：groupadd php）创建php这个组</span><br><span class="line">groupmod -n 新组名 原组名//修改组（例：groupmod -n php python）把php这个组修改成python</span><br></pre></td></tr></table></figure></p><h3 id="用户的操作"><a href="#用户的操作" class="headerlink" title="用户的操作"></a>用户的操作</h3><p>对应配置文件：/etc/passwd<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -g 组编号 用户名//创建用户，顺便分组</span><br><span class="line">usermod -l 新用户名 原用户名//修改用户名</span><br><span class="line">userdel -r 用户名//删除用户信息同时删除用户家目录</span><br></pre></td></tr></table></figure></p><p>设置用户密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名//例：passwd vonfly(给vonfly设置新密码)</span><br></pre></td></tr></table></figure></p><h2 id="权限操作"><a href="#权限操作" class="headerlink" title="权限操作"></a>权限操作</h2><h3 id="字母相对方式设置权限"><a href="#字母相对方式设置权限" class="headerlink" title="字母相对方式设置权限"></a>字母相对方式设置权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u+/-rwx,g+/-rwx,o+/-rwx filename//主人，同组用户，其他组用户增加或减少权限，可以设置一个或多个权限</span><br><span class="line">chmod +w,-x filename//统一给每一个组别设置统一权限（相当于给主人，同组用户，其他组用户增加了读的权限，减少了执行的权限）</span><br></pre></td></tr></table></figure><h3 id="数字绝对方式设置权限（会直接覆盖之前的权限）"><a href="#数字绝对方式设置权限（会直接覆盖之前的权限）" class="headerlink" title="数字绝对方式设置权限（会直接覆盖之前的权限）"></a>数字绝对方式设置权限（会直接覆盖之前的权限）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 621 filename//表示给主人设置成读写权限，同组用户设置写权限，其他组用户设置执行权限</span><br><span class="line">chmod -R 777 dirname//-R参数表示递归方式设置目录权限</span><br></pre></td></tr></table></figure><p>说明：<br>读：4，写：2，执行：1<br>0表示没有权限<br>1表示执行权限<br>2表示写权限<br>3表示写、执行权限<br>4表示读权限<br>5表示读、执行权限<br>6表示读、写权限<br>7表示读、写、执行权限</p><p>文件的读写执行具体表示：<br>读：表示是否可以查看文件内容<br>写：表示是否可以修改该文件<br>执行：一般表示执行shell脚本程序文件</p><p>目录的读写执行具体表示：<br>读：表示是否可以查看该目录下的文件信息<br>写：表示是否可以给该目录创建、删除文件<br>执行：表示用户是否可以通过cd进入该目录</p><h2 id="find文件查找指令"><a href="#find文件查找指令" class="headerlink" title="find文件查找指令"></a>find文件查找指令</h2><p>参数说明</p><table><thead><tr><th>选项</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td>-name</td><td style="text-align:right">根据文件名字查找文件</td></tr><tr><td>-size</td><td style="text-align:right">根据文件大小查找文件</td></tr><tr><td>-maxdepth</td><td style="text-align:right">限制最深层次查找文件</td></tr><tr><td>-mindepth</td><td style="text-align:right">限制最浅层次查找文件</td></tr><tr><td>-perm</td><td style="text-align:right">把符合某个权限的文件给查找出来</td></tr><tr><td>-user</td><td style="text-align:right">根据主人查找文件</td></tr><tr><td>-group</td><td style="text-align:right">根据组别查找文件</td></tr></tbody></table><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">find /home -name vonfly//在home目录下查找vonfly文件</span><br><span class="line">find /home -name &quot;v*&quot;//在home目录下模糊查找带v字符开始的文件</span><br><span class="line"></span><br><span class="line">find /home -size 100c//在home目录下找大小为100字节的文件</span><br><span class="line">find /home -size 100//在home目录下找大小为100*512字节的文件</span><br><span class="line">find /home -size +10k//在home目录下找大小大于10的文件</span><br><span class="line">find /home -size -10k//在home目录下找大小小于10的文件</span><br><span class="line"></span><br><span class="line">find /home -maxdepth 3 -name vonfly//在home目录下限制最深为3个目录层次，进行vonfly文件查找</span><br></pre></td></tr></table></figure><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><h3 id="查看指令可以使用的参数"><a href="#查看指令可以使用的参数" class="headerlink" title="查看指令可以使用的参数"></a>查看指令可以使用的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 指令名称//例：man useradd</span><br></pre></td></tr></table></figure><h3 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su -//切换到root超级管理员</span><br><span class="line">su vonfly//切换到vonfly普通用户</span><br><span class="line">exit//退回到原用户</span><br></pre></td></tr></table></figure><p>说明：一般su和exit是配对使用的，否则用户切换会叠加</p><h3 id="查看当前用户是谁"><a href="#查看当前用户是谁" class="headerlink" title="查看当前用户是谁"></a>查看当前用户是谁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whoami//显示当前正在操作系统的用户</span><br><span class="line">who am i //显示登录系统的用户</span><br></pre></td></tr></table></figure><h3 id="查看指令对应的可执行-二进制-文件位置"><a href="#查看指令对应的可执行-二进制-文件位置" class="headerlink" title="查看指令对应的可执行(二进制)文件位置"></a>查看指令对应的可执行(二进制)文件位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which 指令名称(如：which pwd)</span><br></pre></td></tr></table></figure><h3 id="查看系统活跃的进程"><a href="#查看系统活跃的进程" class="headerlink" title="查看系统活跃的进程"></a>查看系统活跃的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -A</span><br><span class="line">ps -aux</span><br></pre></td></tr></table></figure><h3 id="将文本指定的信息匹配出来"><a href="#将文本指定的信息匹配出来" class="headerlink" title="将文本指定的信息匹配出来"></a>将文本指定的信息匹配出来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 关键字 文件的路径//例：grep php ./test.txt 表示在当前文件test.txt中找php关键字</span><br></pre></td></tr></table></figure><h3 id="通过进程名称来查询程序-如mysql-是否有启用（管道使用）"><a href="#通过进程名称来查询程序-如mysql-是否有启用（管道使用）" class="headerlink" title="通过进程名称来查询程序(如mysql)是否有启用（管道使用）"></a>通过进程名称来查询程序(如mysql)是否有启用（管道使用）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep mysql</span><br><span class="line">pstree -p | grep mysql//方法2</span><br></pre></td></tr></table></figure><h3 id="通过端口查看程序是否有启用（管道使用）"><a href="#通过端口查看程序是否有启用（管道使用）" class="headerlink" title="通过端口查看程序是否有启用（管道使用）"></a>通过端口查看程序是否有启用（管道使用）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -anpl | grep 3306//查看mysql（默认监听3306端口）</span><br><span class="line">netstat -anpl | grep 9000//查看php（默认监听9000端口）</span><br><span class="line">netstat -tunpl | grep :3306//方法2</span><br></pre></td></tr></table></figure><h3 id="查看系统分区情况"><a href="#查看系统分区情况" class="headerlink" title="查看系统分区情况"></a>查看系统分区情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df -lh</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="查看目录或者文件的大小"><a href="#查看目录或者文件的大小" class="headerlink" title="查看目录或者文件的大小"></a>查看目录或者文件的大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h filename</span><br></pre></td></tr></table></figure><h3 id="关闭指定进程号的进程"><a href="#关闭指定进程号的进程" class="headerlink" title="关闭指定进程号的进程"></a>关闭指定进程号的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 pid//强制关闭</span><br><span class="line">kill -15 pid//正常关闭</span><br></pre></td></tr></table></figure><h3 id="查看内存使用"><a href="#查看内存使用" class="headerlink" title="查看内存使用"></a>查看内存使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><h3 id="查看CPU使用"><a href="#查看CPU使用" class="headerlink" title="查看CPU使用"></a>查看CPU使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure><h3 id="可以切换终端"><a href="#可以切换终端" class="headerlink" title="可以切换终端"></a>可以切换终端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt+f(1-6),共有6个终端</span><br></pre></td></tr></table></figure><h3 id="实时跟踪一个命令的执行结果-如跟踪ls-lh命令"><a href="#实时跟踪一个命令的执行结果-如跟踪ls-lh命令" class="headerlink" title="实时跟踪一个命令的执行结果(如跟踪ls -lh命令)"></a>实时跟踪一个命令的执行结果(如跟踪ls -lh命令)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以切换终端来查看具体效果</span><br><span class="line">watch -n1 ls -lh</span><br></pre></td></tr></table></figure><h3 id="加压方式"><a href="#加压方式" class="headerlink" title="加压方式"></a>加压方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.tar.gz------------------&gt; tar zxvf 压缩包名.tar.gz</span><br><span class="line">.tar.bz2-----------------&gt; tar jxvf 压缩包名.tar.bz2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的一些Linux命令&lt;br&gt;
    
    </summary>
    
      <category term="命令" scheme="https://vonfly.github.io/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="linux" scheme="https://vonfly.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的git-commands</title>
    <link href="https://vonfly.github.io/2016/06/18/git-commands/"/>
    <id>https://vonfly.github.io/2016/06/18/git-commands/</id>
    <published>2016-06-18T12:08:16.000Z</published>
    <updated>2018-08-22T11:54:19.382Z</updated>
    
    <content type="html"><![CDATA[<hr><p>常用的一些git命令以及平时项目遇到的一些问题解决方法<br><a id="more"></a></p><h3 id="git一些命令"><a href="#git一些命令" class="headerlink" title="git一些命令"></a>git一些命令</h3><p>在当前目录新建一个Git代码库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></p><p>新建一个目录，将其初始化为Git代码库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init [project-name]</span><br></pre></td></tr></table></figure><p>下载一个项目和它的整个代码历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><p>添加指定文件到暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add [file1] [file2] ...</span><br></pre></td></tr></table></figure></p><p>添加指定目录到暂存区，包括子目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add [dir]</span><br></pre></td></tr></table></figure></p><p>将所有修改过的工作文件提交暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ add .</span><br></pre></td></tr></table></figure></p><p>添加每个变化前，都会要求确认，<br>对于同一个文件的多处变化，可以实现分次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -p</span><br></pre></td></tr></table></figure></p><p>删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm file.name</span><br></pre></td></tr></table></figure></p><p>(工作区和暂存区都存在的情况下)删除工作区文件，同时删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -f file.name</span><br></pre></td></tr></table></figure></p><p>(工作区和暂存区都存在的情况下)不删除工作区文件，删除暂存区文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached file.name</span><br></pre></td></tr></table></figure></p><p>改名文件，并且将这个改名放入暂存区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure></p><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><p>提交暂存区到仓库区（提交说明要用英文引号）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m [提交说明]</span><br></pre></td></tr></table></figure></p><p>提交暂存区到仓库区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit [file1] [file2] ... -m [提交说明]</span><br></pre></td></tr></table></figure></p><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>列出所有本地分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure></p><p>列出所有远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure></p><p>列出所有本地分支和远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure></p><p>新建一个分支，但依然停留在当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [branch-name]</span><br></pre></td></tr></table></figure></p><p>新建一个分支，并切换到该分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b [branch]</span><br></pre></td></tr></table></figure></p><p>新建一个分支，指向指定commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [branch] [commit]</span><br></pre></td></tr></table></figure></p><p>新建一个分支，与指定的远程分支建立追踪关系<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track [branch] [remote-branch]</span><br></pre></td></tr></table></figure></p><p>切换到指定分支，并更新工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [branch-name]</span><br></pre></td></tr></table></figure></p><p>切换到上一个分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -</span><br></pre></td></tr></table></figure></p><p>建立追踪关系，在现有分支与指定的远程分支之间<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br></pre></td></tr></table></figure></p><p>合并指定分支到当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge [branch]</span><br></pre></td></tr></table></figure></p><p>选择一个commit，合并进当前分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick [commit]</span><br></pre></td></tr></table></figure></p><p>删除分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d [branch-name]</span><br></pre></td></tr></table></figure></p><p>删除远程分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure></p><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><p>显示有变更的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure></p><p>显示当前分支的版本历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></p><p>显示之后版本历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure></p><p>显示commit历史，以及每次commit发生变更的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure></p><p>搜索提交历史，根据关键词<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br></pre></td></tr></table></figure></p><p>显示某个文件的版本历史，包括文件改名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br></pre></td></tr></table></figure></p><p>显示指定文件相关的每一次diff<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br></pre></td></tr></table></figure></p><p>显示过去5次提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br></pre></td></tr></table></figure></p><p>显示指定文件是什么人在什么时间修改过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git blame [file]</span><br></pre></td></tr></table></figure></p><p>显示暂存区和工作区的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure></p><p>显示暂存区和上一个commit的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached [file]</span><br></pre></td></tr></table></figure></p><p>显示工作区与当前分支最新commit之间的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure></p><p>显示两次提交之间的差异<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure></p><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><p>下载远程仓库的所有变动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [remote]</span><br></pre></td></tr></table></figure></p><p>显示所有远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure></p><p>显示某个远程仓库的信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show [remote]</span><br></pre></td></tr></table></figure></p><p>增加一个新的远程仓库，并命名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add [shortname] [url]</span><br></pre></td></tr></table></figure></p><p>取回远程仓库的变化，并与本地分支合并<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull [remote] [branch]</span><br></pre></td></tr></table></figure></p><p>上传本地指定分支到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote] [branch]</span><br></pre></td></tr></table></figure></p><p>推送所有分支到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure></p><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><p>恢复暂存区的指定文件到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [file]</span><br></pre></td></tr></table></figure></p><p>恢复某个commit的指定文件到暂存区和工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [commit] [file]</span><br></pre></td></tr></table></figure></p><p>恢复暂存区的所有文件到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout .</span><br></pre></td></tr></table></figure></p><h5 id="整个版本的撤销"><a href="#整个版本的撤销" class="headerlink" title="整个版本的撤销"></a>整个版本的撤销</h5><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset [file]</span><br></pre></td></tr></table></figure></p><p>重置暂存区与工作区，与上一次commit保持一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard [commit]</span><br></pre></td></tr></table></figure></p><h4 id="显示当前的Git配置"><a href="#显示当前的Git配置" class="headerlink" title="显示当前的Git配置"></a>显示当前的Git配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><p>编辑Git配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config -e [--global]</span><br></pre></td></tr></table></figure></p><p>设置提交代码时的用户信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config [--global] user.name <span class="string">"your username"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"your e-mail"</span></span><br></pre></td></tr></table></figure></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="多人协作解决冲突"><a href="#多人协作解决冲突" class="headerlink" title="多人协作解决冲突"></a>多人协作解决冲突</h4><p>推荐方法1：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch</span><br><span class="line">$ git diff master origin/master</span><br><span class="line">$ git merge orgin/master</span><br></pre></td></tr></table></figure></p><p>方法2：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure></p><p>参考：<br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">阮一峰-常用 Git 命令清单</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;常用的一些git命令以及平时项目遇到的一些问题解决方法&lt;br&gt;
    
    </summary>
    
      <category term="命令" scheme="https://vonfly.github.io/categories/%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="命令使用" scheme="https://vonfly.github.io/tags/%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    
      <category term="git" scheme="https://vonfly.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>phpstorm 编辑器的使用技巧</title>
    <link href="https://vonfly.github.io/2016/05/18/phpstorm-use-skills/"/>
    <id>https://vonfly.github.io/2016/05/18/phpstorm-use-skills/</id>
    <published>2016-05-18T13:39:58.000Z</published>
    <updated>2018-08-24T06:50:04.582Z</updated>
    
    <content type="html"><![CDATA[<p>phpstorm 编辑器的使用技巧<br><a id="more"></a></p><h3 id="一些常用快捷键-默认配置"><a href="#一些常用快捷键-默认配置" class="headerlink" title="一些常用快捷键(默认配置)"></a>一些常用快捷键(默认配置)</h3><p>1、快速查找文件<br>ctrl+shift+n</p><p>2、最近打开的文件，进行输入文件名搜索(Recent Files)<br>ctrl+e</p><p>3、优化导入的类和包(如移除没有用到的命名空间)<br>ctrl+alt+o</p><h3 id="项目命名空间设置"><a href="#项目命名空间设置" class="headerlink" title="项目命名空间设置"></a>项目命名空间设置</h3><p><img src="http://olixffhc0.bkt.clouddn.com/phpstorm1.png" alt="项目命名空间设置"></p><h3 id="断点调试设置"><a href="#断点调试设置" class="headerlink" title="断点调试设置"></a>断点调试设置</h3><p>1、检测本地php环境是否安装了Xdebug<br>在本地输出phpinfo()；搜索Xdebug;如下图：<br><img src="http://olixffhc0.bkt.clouddn.com/phpstorm2.png" alt="phpinfo"></p><p>如果没有安装，安装操作Xdebug如下：<br>将phpinfo();的信息(浏览器中右键查看源代码 -&gt; ctrl+a -&gt; ctrl+c)全部输入网址： (<a href="http://xdebug.org/wizard.php" target="_blank" rel="noopener">http://xdebug.org/wizard.php</a>) 中的框，得到适配的xdebug版本，按照下图中操作进行。<br><img src="http://olixffhc0.bkt.clouddn.com/phpstorm3.png" alt="phpinfo"><br><img src="http://olixffhc0.bkt.clouddn.com/phpstorm4.png" alt="phpinfo"></p><p>2、安装好Xdebug之后，配置本地的php.ini。添加配置如下，如需添加其他Xdebug配置，可以查看phpinfo中xdebug配置，根据情况自己添加。</p><p>zend_extension=”D:\phpStudy\PHPTutorial\php\php-5.6.27-nts\ext\php_xdebug.dll”<br>xdebug.remote_enable=1<br>xdebug.remote_handler=dbgp<br>xdebug.remote_mode=req<br>xdebug.remote_host=localhost<br>xdebug.remote_port=9000<br>xdebug.idekey=”PHPSTORM”</p><p>说明：zend_extension的值根据自己的本地环境填写<br>xdebug.remote_port默认值为9000，这里需要跟phpstorm配置一致。phpstorm中的Debug默认配置也为9000(File-&gt;Settings-&gt;Languages &amp; Frameworks-&gt;PHP-&gt;Debug)<br>然后重启服务</p><p>3、配置phpstorm<br><img src="http://olixffhc0.bkt.clouddn.com/phpstorm5.png" alt="phpinfo"><br><img src="http://olixffhc0.bkt.clouddn.com/phpstorm6.png" alt="phpinfo"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;phpstorm 编辑器的使用技巧&lt;br&gt;
    
    </summary>
    
      <category term="phpstorm" scheme="https://vonfly.github.io/categories/phpstorm/"/>
    
    
      <category term="phpstorm" scheme="https://vonfly.github.io/tags/phpstorm/"/>
    
  </entry>
  
</feed>
